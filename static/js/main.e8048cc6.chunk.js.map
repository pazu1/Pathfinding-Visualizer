{"version":3,"sources":["constvar.js","components/Settings.js","components/GridButton.js","components/Grid.js","components/ItemBarBtn.js","components/ItemBar.js","extfunctions.js","components/App.js","index.js"],"names":["CellStyles","background","color","transform","Alg","CellType","VizState","AlertTypes","Adjacent","Settings","runButtonText","runButtonIcon","fontSize","className","this","props","visualizationState","name","id","onChange","changeSelectedAlgorithm","disabled","value","min","max","visualizationSpeed","e","changeVisSpeed","target","type","onClick","onMazeClick","onResetClick","style","React","Component","GridButton","useState","setState","updateAnyway","compRef","useRef","cell","ref","onMouseDown","disableDrawing","clickFunction","x","y","onMouseOver","drawing","Grid","state","runningAlgorithm","event","pressed","tableContent","grid","map","row","rowContent","key","updateCell","handleMouse","onMouseLeave","onMouseUp","ItemBarBtn","display","parentHidden","boxShadow","border","trigger","text","position","closeOnDocumentClick","open","showTip","on","onClose","onTipClosed","tipText","ItemBar","expanded","setExpanded","hide","hidden","dropDownIcon","height","zIndex","opacity","selectedItem","changeSelectedItem","activeAlert","removeAlert","sleep","ms","Promise","resolve","setTimeout","applyStyle","reference","effect","current","asyncForEach","array","callback","a","index","length","App","start","end","route","algorithm","item","drawOnGrid","bind","changeAlgorithm","changeItem","onRunButtonClick","updateRoute","clearVisualization","createGrid","generateMaze","algFunctions","1","aStarPlus","2","BFS","3","4","DFS","rows","Math","floor","window","innerHeight","cols","innerWidth","newGrid","push","weight","parseInt","reverse","coord","abs","then","itemType","replaceCell","startOrEnd","prevX","prevY","forEach","wallList","random","wall","psgCount","direction","canBeOpened","splice","alg","foundRoute","comparator","b","gScore","queue","Node","dist","distance","adjacencyListD","algGrid","shift","next","d","unshift","currentCell","sort","setRoute","resetAll","c","adjacencyList","console","log","pop","width","flexDirection","topMargin","padding","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e8048cc6.chunk.js","sourcesContent":["export const CellStyles = [\n    {\n        background: '#eee',\n        color: '#000',\n        transform: 'scale(1.0)'\n    },\n    {\n        background: '#000',\n        color: '#000',\n        transform: 'scale(1.0)'\n    },\n    {\n        background: '#36bf00',\n        transform: 'scale(0.7)'\n    },\n    {\n        background: '#a200ff',\n        transform: 'scale(0.7)',\n    },\n    {\n        background: '#38ffc7',\n        transform: 'scale(0.2)'\n    },\n    {\n        background: '#f05e54',\n        transform: 'scale(1.0)'\n    },\n    {\n        background: '#38ffc7',\n        transform: 'scale(1.0)'\n    }\n]\n\nexport const Alg = {\n    ASTAR: 1,\n    DIJKSTRA: 2,\n    BFS: 3,\n    DFS: 4\n}\n\nexport const CellType = {\n    NONE: 0,\n    WALL: 1,\n    START: 2,\n    END: 3,\n    VISITED: 4,\n    ROUTE: 5\n}\n\nexport const VizState = {\n    INACTIVE: 0,\n    RUNNING: 1,\n    FINISHED: 2\n}\n\nexport const AlertTypes = {\n    NOSTART: 'Please add a start node.',\n    NOEND: 'Please add an end node.'\n}\n\nexport const Adjacent = [\n    [-1,0],\n    [0,1],\n    [1,0],\n    [0,-1]\n]\n\n","import React from 'react';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport RangeSlider from 'react-bootstrap-range-slider';\nimport MdTrash from 'react-ionicons/lib/MdTrash'\nimport MdPlay from 'react-ionicons/lib/MdPlay'\nimport MdFastForward from 'react-ionicons/lib/MdFastforward'\nimport MdRefresh from 'react-ionicons/lib/MdRefresh'\n\nimport { Alg, VizState } from '../constvar'\n\nclass Settings extends React.Component { \n\n    render() {\n        let runButtonText = 'Run! '\n        let runButtonIcon = <MdPlay fontSize='17px' className='ionIcon'/>\n\n        if (this.props.visualizationState === VizState.RUNNING) { \n            runButtonText = 'Skip visualization'\n            runButtonIcon = <MdFastForward fontSize='17px' className='ionIcon'/>\n        } else if (this.props.visualizationState === VizState.FINISHED) {\n            runButtonText = 'Clear route'\n            runButtonIcon = <MdRefresh fontSize='17px' className='ionIcon'/>\n        }\n\n        return (\n            <div className='topBar'>\n                <div>\n                    <label>Algorithm: </label>\n                    <select \n                        name='algorithms' \n                        id='algorithms'\n                        onChange={this.props.changeSelectedAlgorithm}\n                        disabled={this.props.visualizationState !== VizState.INACTIVE}\n                    >\n                         <option value={Alg.ASTAR}>A*</option>\n                         <option value={Alg.DIJKSTRA}>Dijkstra</option>\n                         <option value={Alg.BFS}>BFS</option>\n                         <option value={Alg.DFS}>DFS</option>\n                    </select>\n                </div>\n\n                <div className='sliderContainer'>\n                    <label>Visualization speed:</label>\n                    <RangeSlider\n                        min={10}\n                        max={100}\n                        value={this.props.visualizationSpeed}\n                        onChange={(e) => this.props.changeVisSpeed(e.target.value)}\n                    />\n                </div>\n\n                <button \n                    type='button' \n                    className='settingsButton'\n                    disabled={this.props.visualizationState === VizState.RUNNING }\n                    onClick={() => this.props.onMazeClick()}\n                >\n                    Generate maze \n                </button>\n\n                <button \n                    type='button' \n                    className='resetButton'\n                    disabled={this.props.visualizationState === VizState.RUNNING }\n                    onClick={() => this.props.onResetClick(true)}\n                >\n                    <MdTrash \n                        fontSize='17px' \n                        className='ionIcon' \n                        color={this.props.visualizationState === VizState.RUNNING ? '#666' : null}\n                    />\n                    Reset grid\n                </button>\n\n                <button \n                    style={this.props.visualizationState !== VizState.INACTIVE ? { background: '#eee' } : null}\n                    type='button' \n                    className='settingsButton'\n                    onClick={this.props.onClick}\n                >\n                    {runButtonIcon}\n                    {runButtonText}\n                </button>\n\n            </div>\n        )\n    }\n}\n\nexport default Settings\n","import React, { useState, useRef } from 'react'\n\nfunction GridButton (props) { \n\n    const [, setState] = useState()\n\n    const updateAnyway = () => {\n        setState({})\n    }\n\n    const compRef = useRef()\n    props.cell.ref = compRef\n\n    return(\n        <button \n            ref={compRef}\n            type='button' \n            className='gridButton'\n\n            onMouseDown = {() => {\n                if (!props.disableDrawing) {\n                    props.clickFunction(props.x, props.y)\n                    updateAnyway()\n                }\n                \n            }}\n            onMouseOver = {() => {\n                if (props.drawing && !props.disableDrawing) {\n                    props.clickFunction(props.x, props.y)\n                    updateAnyway()\n                }\n            }}\n        >‎\n        </button>\n    )\n}\n\nexport default GridButton\n","import React from 'react';\n\nimport GridButton from './GridButton'\n\nclass Grid extends React.Component {\n\n    constructor() {\n        super()\n\n        this.state = {\n            drawing: false,\n            runningAlgorithm: false\n        }\n\n    }\n\n    handleMouse(event, pressed) {\n        this.setState({ drawing: pressed })\n    }\n\n    render() {\n\n        let y = -1\n        let tableContent = this.props.grid.map(row => { \n            let x = -1\n            y++\n            let rowContent = row.map(cell => {\n                x++\n                return(\n                    <td key={x}>\n                        <GridButton \n                            cell={this.props.grid[y][x]}\n                            x={x}\n                            y={y}\n                            clickFunction={this.props.updateCell}\n                            drawing={this.state.drawing}\n                            disableDrawing={this.props.disableDrawing}\n                        />\n                    </td>\n                )\n            })\n            return (\n                <tr key={y}>\n                    {rowContent}\n                </tr>\n            )\n        })\n\n        return (\n            <table \n                className='gridBase' \n                onMouseDown={(e) => {this.handleMouse(e, true)}}\n                onMouseLeave={(e) => this.handleMouse(e, false)}\n                onMouseUp={(e) => this.handleMouse(e, false)}\n            >\n                <tbody>\n                    {tableContent}\n                </tbody>\n            </table>\n        )\n    }\n}\n\nexport default Grid\n","import React from 'react'\nimport Popup from 'reactjs-popup'\n\nfunction ItemBarBtn(props) {\n    \n    let style = { display: 'table-row'}\n    if (props.parentHidden) {\n        style.display = 'none'\n    }\n    if (props.disabled) {\n        style.boxShadow = 'none'\n        style.border = '2px solid transparent'\n    }\n\n\n    return (\n        <Popup trigger={\n            <button\n                className='itemBarBtn'\n                style={ style }\n                onClick={ props.onClick }\n            >\n                <span\n                    style={{ color: props.color }}\n                >\n                    { '■ ' }\n                </span>\n                { props.text ?<p id='itemBarText'>{props.text}</p> : 'item' }\n            </button>\n            }\n            position='right center'\n            closeOnDocumentClick\n            open={props.showTip}\n            on='none'\n            onClose={props.onTipClosed}\n        >\n            {props.tipText}\n        </Popup>\n    )\n}\n\nexport default ItemBarBtn\n","import React, { useState } from 'react';\n\nimport ItemBarBtn from './ItemBarBtn'\nimport { CellType, AlertTypes } from '../constvar'\nimport MdArrowDropdown from 'react-ionicons/lib/MdArrowDropdown'\nimport MdArrowDropup from 'react-ionicons/lib/MdArrowDropup'\n\nfunction ItemBar(props) {\n    const [expanded, setExpanded] = useState(true) \n    let hide = !expanded || props.hidden\n    let dropDownIcon = <MdArrowDropup fontSize='25px' className='ionDropdown'/>\n    if (hide) {\n        dropDownIcon = <MdArrowDropdown fontSize='25px' className='ionDropdown'/>\n    }\n\n    return (\n        <div style={ { height: '100%', zIndex:10} }>\n            <button \n                className = 'itemBarToggle'\n                onClick={() => {\n                    if (!props.hidden) setExpanded(!expanded)\n                }}>\n                    Items\n                    { dropDownIcon }\n            </button>\n            <div \n                className = 'itemBar'\n                style={ \n                    !hide ? { \n                        height: '20vh', \n                        opacity: 100} \n                    : { \n                        height: '0%', \n                        opacity: 0\n                }}\n                    >\n                <ItemBarBtn \n                    parentHidden={!expanded}\n                    text={'Start node'}\n                    color={'#00ff37'}\n                    disabled={ props.selectedItem !== CellType.START }\n                    onClick={() => {props.changeSelectedItem(CellType.START)}}\n                    showTip={props.activeAlert === AlertTypes.NOSTART}\n                    tipText={props.activeAlert} \n                    onTipClosed={props.removeAlert}\n\n                />\n                <ItemBarBtn \n                    parentHidden={!expanded}\n                    text={'End node'}\n                    color={'#a200ff'}\n                    disabled={ props.selectedItem !== CellType.END }\n                    onClick={() => {props.changeSelectedItem(CellType.END)}}\n                    showTip={props.activeAlert === AlertTypes.NOEND}\n                    tipText={props.activeAlert} \n                    onTipClosed={props.removeAlert}\n\n                />\n                <ItemBarBtn \n                    parentHidden={!expanded}\n                    text={'Wall'}\n                    color={'#000'}\n                    disabled={ props.selectedItem !== CellType.WALL }\n                    onClick={() => props.changeSelectedItem(CellType.WALL)}\n\n                />\n                <ItemBarBtn \n                    parentHidden={!expanded}\n                    text={'Eraser'}\n                    color={'#fff'}\n                    disabled={ props.selectedItem !== CellType.NONE }\n                    onClick={() => props.changeSelectedItem(CellType.NONE)}\n\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default ItemBar\n","export function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\nexport function applyStyle(style, reference, effect = null) {\n    reference.current.style.background = style.background\n    reference.current.style.transform = style.transform\n    if (effect) {\n        effect(reference)\n    }\n}\n\nexport async function asyncForEach(array, callback) {\n    for (let index = 0; index < array.length; index++) {\n        await callback(array[index], index, array)\n    }\n}\n","import React from 'react'\n\nimport Settings from './Settings'\nimport Grid from './Grid'\nimport ItemBar from './ItemBar'\nimport { Alg, CellType, CellStyles, VizState, AlertTypes, Adjacent } from '../constvar'\nimport { sleep, asyncForEach, applyStyle } from '../extfunctions'\n\nconst CELLSIZE = 20\n\nclass App extends React.Component {\n\n    constructor() {\n        super()\n\n        this.grid = []\n        this.start = null\n        this.end = null\n        this.route = []\n\n        this.state = {\n            algorithm: Alg.ASTAR,\n            item: CellType.START,\n            activeAlert: null,\n            visualizationState: VizState.INACTIVE,\n            visualizationSpeed: 90\n        }\n\n        this.drawOnGrid = this.drawOnGrid.bind(this)\n        this.changeAlgorithm = this.changeAlgorithm.bind(this)\n        this.changeItem = this.changeItem.bind(this)\n        this.onRunButtonClick = this.onRunButtonClick.bind(this)\n        this.updateRoute = this.updateRoute.bind(this)\n        this.clearVisualization = this.clearVisualization.bind(this)\n        this.removeAlert = this.removeAlert.bind(this)\n        this.changeVisSpeed = this.changeVisSpeed.bind(this)\n        this.createGrid = this.createGrid.bind(this)\n        this.generateMaze = this.generateMaze.bind(this)\n\n        this.algFunctions = {\n            1: this.aStarPlus.bind(this),\n            2: this.BFS.bind(this),\n            3: this.BFS.bind(this),\n            4: this.DFS.bind(this)\n        }\n    }\n\n    componentDidMount() {\n        this.createGrid()\n    }\n\n    createGrid() {\n        let rows = Math.floor((window.innerHeight*0.7) / CELLSIZE)\n        let cols = Math.floor((window.innerWidth*0.65) / CELLSIZE)\n        let newGrid = []\n        for (let y=0;y<rows;y++) {\n            newGrid.push([])\n            for (let x=0;x<cols;x++) {\n                newGrid[y].push({\n                    type: CellType.NONE,\n                    weight: 0, // TODO\n                    x: x,\n                    y: y,\n                    ref: null\n                })\n            }\n        }\n        this.grid = newGrid\n        this.setState({})\n    }\n\n    changeItem(selectedItem) {\n        this.setState({item: selectedItem})\n    }\n\n    changeAlgorithm(event) {\n        this.setState({algorithm: parseInt(event.target.value)})\n    }\n\n    removeAlert() {\n        this.setState({activeAlert: null})\n    }\n\n    changeVisSpeed(value) {\n        this.setState({ visualizationSpeed: value })\n    }\n\n    onRunButtonClick() { \n        let start = this.start\n        let end = this.end\n        if (start === null) {\n            this.setState({activeAlert: AlertTypes.NOSTART})\n            return\n        } else if (end === null) {\n            this.setState({activeAlert: AlertTypes.NOEND})\n            return\n        }\n\n        if (this.state.visualizationState === VizState.RUNNING) {\n            this.setState({\n                visualizationState: VizState.FINISHED\n            })\n        } else if (this.state.visualizationState === VizState.FINISHED) {\n            this.clearVisualization()\n        } else {\n            this.setState({\n                start: start,\n                end: end,\n                visualizationState: VizState.RUNNING},\n                () => this.algFunctions[this.state.algorithm](this.grid[start.y][start.x],\n                    this.grid[end.y][end.x])\n            )\n        }\n    }\n\n    async updateRoute() { \n        this.route.reverse()\n        asyncForEach(this.route, async (coord) => {\n            if (this.state.visualizationState === VizState.RUNNING)\n                await sleep(Math.abs(this.state.visualizationSpeed-110)) \n            this.grid[coord.y][coord.x].type = CellType.ROUTE\n            applyStyle(CellStyles[CellType.ROUTE], this.grid[coord.y][coord.x].ref)\n\n        }).then(() => {\n\n            this.setState({visualizationState: VizState.FINISHED})\n        })\n    }\n\n    drawOnGrid(x, y, itemType = this.state.item) { \n\n        const replaceCell = (startOrEnd) => {\n                let prevX = startOrEnd.x\n                let prevY = startOrEnd.y\n                this.grid[prevY][prevX].type = CellType.NONE\n                applyStyle(CellStyles[CellType.NONE], this.grid[prevY][prevX].ref)\n        }\n\n        // Delete end- / start-nodes if they were drawn on\n        if (this.end && this.end.x === x && this.end.y === y ) {\n            replaceCell(this.end)\n            this.end = null \n        } else if (this.start && this.start.x === x && this.start.y === y ) {\n            replaceCell(this.start)\n            this.start = null\n        }\n        \n        // Special case: drawing end- or start-nodes\n        if (itemType ===  CellType.START) { \n            if (this.start) {\n                replaceCell(this.start)\n            }\n            this.start = {x: x, y: y}\n        } else if (itemType ===  CellType.END) { \n            if (this.end) {\n                replaceCell(this.end)\n            }\n            this.end = {x: x, y: y}\n        } \n\n        this.grid[y][x].type = itemType\n        applyStyle(CellStyles[itemType], this.grid[y][x].ref)\n    }\n\n    generateMaze() { // Prim's Algorithm\n        this.clearVisualization()\n        this.grid.forEach(row => {\n            row.forEach(cell => {\n                cell.type = CellType.WALL\n            })\n        })\n\n        let wallList = [this.grid[1][1]]\n\n        const canBeOpened = (cell) => {\n            let psgCount = 0\n            if (!cell) return false\n            Adjacent.forEach(direction => {\n                let x = cell.x+direction[0]\n                let y = cell.y+direction[1]\n                if (!this.grid[y] || !this.grid[y][x]) return\n                if (this.grid[y][x].type === CellType.NONE) psgCount += 1\n            })\n            return ( psgCount <= 1 )\n        }\n\n        while (wallList.length) {\n            let index = Math.floor(Math.random() * wallList.length)\n            let wall =  wallList[index]\n            if (canBeOpened(wall)) {\n                wall.type = CellType.NONE\n                Adjacent.forEach((direction) => {\n                    let x = wall.x+direction[0]\n                    let y = wall.y+direction[1]\n                    if (!this.grid[y] || !this.grid[y][x]) return\n                    wallList.push(this.grid[y][x])\n                })\n            }\n            wallList.splice(index,1)\n        }\n        \n        // draw results\n        this.grid.forEach(row => {\n            row.forEach(cell => {\n                this.drawOnGrid(cell.x, cell.y, cell.type)\n            })\n        })\n\n    }\n\n    async aStarPlus(start, end, alg = Alg.ASTAR) { \n\n        // initialize\n        let foundRoute = false\n        class Node {\n          constructor(x, y, dist, gScore) {\n            this.x = x\n            this.y = y\n            this.distance = dist\n            this.gScore = gScore\n          }\n        }\n        const comparator = (a,b) => { \n            return a.gScore > b.gScore ? 1 : -1\n        }\n\n        let queue = [] \n        queue.push(new Node(start.x,start.y,0,0))\n        let adjacencyListD = { \n            [start.x+':'+start.y]: null\n        }\n        let algGrid = this.grid\n\n        // perform search\n        while (queue.length) {\n            let current = queue.shift()\n\n            if (current.x === end.x && current.y === end.y) { // found\n                foundRoute = true\n                break\n            }\n\n            Adjacent.forEach((direction) => {\n                let x = current.x+direction[0]\n                let y = current.y+direction[1]\n                if (!algGrid[y]) return\n                if (!algGrid[y][x]) return\n                let next = algGrid[y][x]\n                if (next.type === CellType.WALL ||\n                   (next.x === start.x && next.y === start.y)) return\n\n                if (!adjacencyListD[x+':'+y]) { // Not yet discovered\n                    adjacencyListD[x+':'+y] = {\n                        x: current.x, \n                        y: current.y,\n                        d: 9999\n                    }\n                }\n\n                let distance = current.distance+1  \n                const multiplier = 1.0\n                let gScore = distance + multiplier*(Math.abs(end.x - x) + Math.abs(end.y - y))\n\n                if (distance < adjacencyListD[x+':'+y].d) { // Found a shorter path\n                    adjacencyListD[x+':'+y] = {\n                        x: current.x, \n                        y: current.y,\n                        d: distance\n                    }\n                    if (alg !== Alg.DFS) {\n                        queue.push(new Node(x, y, distance,gScore))\n                    }\n                    else {\n                        queue.unshift(new Node(x, y, distance,gScore))\n                    }\n                }\n            })\n            let currentCell = algGrid[current.y][current.x]\n\n            if (currentCell.type !== CellType.START && currentCell.type !== CellType.VISITED) { // Mark current as visited\n                currentCell.type = CellType.VISITED \n                if ( this.state.visualizationState === VizState.RUNNING ) { // Running -> run animation\n                    await sleep(Math.abs(this.state.visualizationSpeed-110)) \n                    applyStyle(CellStyles[CellType.VISITED], currentCell.ref, (ref) => {\n                        sleep(400).then(() => {\n                            ref.current.style.transform = 'scale(1.0)'\n                        })\n                    })\n                } else {\n                    applyStyle(CellStyles[6], currentCell.ref) \n                }\n            }\n\n            if (alg === Alg.ASTAR ) {\n                queue.sort(comparator)\n            }\n        }\n\n        // draw results\n        if (foundRoute) {\n            this.setRoute(adjacencyListD,end) \n        }\n        if (this.state.visualizationState === VizState.RUNNING) {\n            await sleep(100)\n        }\n        this.updateRoute()\n    }\n\n    async DFS(start, end) {\n        this.aStarPlus(start, end, Alg.DFS)\n    }\n        \n    async BFS(start, end) {\n        this.aStarPlus(start, end, Alg.BFS)\n    }\n\n    clearVisualization(resetAll = false) {\n        this.route = []\n\n        this.setState(() => {\n            this.grid.map((row) => {\n                row = row.map((c) => {\n                    if (this.start && c.x === this.start.x && c.y === this.start.y) \n                        c.type = CellType.START\n                    else if (this.end && c.x === this.end.x && c.y === this.end.y) \n                        c.type = CellType.END\n                    else if (resetAll ||\n                    c.type === CellType.VISITED ||\n                    c.type === CellType.ROUTE) {\n                        applyStyle(CellStyles[CellType.NONE], c.ref)\n                        c.type = CellType.NONE\n                    }\n                    return c\n                })\n                return row\n            })\n            return { visualizationState: VizState.INACTIVE }\n        })\n        if (resetAll) {\n            this.start = null\n            this.end = null\n        }\n            \n    }\n\n    setRoute(adjacencyList, end) {\n        this.route.push({\n            x: end.x, \n            y: end.y\n        })\n        \n        let index = end.x+':'+end.y\n        while (adjacencyList[index] !== null) {\n            this.route.push(adjacencyList[index])\n            index = adjacencyList[index].x+':'+adjacencyList[index].y\n        }\n        console.log('Route length: '+this.route.length)\n        this.route.shift() // remove start\n        this.route.pop() // and end\n    }\n\n    render() {\n        return (\n            <div>\n                <Settings\n                    changeSelectedAlgorithm={this.changeAlgorithm}\n                    onClick={this.onRunButtonClick}\n                    onMazeClick={this.generateMaze}\n                    onResetClick={this.clearVisualization}\n                    visualizationState={this.state.visualizationState}\n                    changeVisSpeed={this.changeVisSpeed}\n                    visualizationSpeed={this.state.visualizationSpeed}\n                    activeAlert={this.state.activeAlert}\n                />\n                <span \n                    style = {{ \n                        width: '100%', \n                        height: '100%', \n                        display: 'flex' , \n                        flexDirection: 'row' , \n                        topMargin: '100', \n                        position: 'fixed',\n                        padding: '0px 0px'\n                    }}>\n                    <ItemBar\n                        changeSelectedItem={this.changeItem}\n                        selectedItem={this.state.item}\n                        hidden={this.state.visualizationState !== VizState.INACTIVE}\n                        activeAlert={this.state.activeAlert}\n                        removeAlert={this.removeAlert}\n                    />\n                    <Grid\n                        updateCell={this.drawOnGrid}\n                        selectedItem={this.state.item}\n                        grid={this.grid}\n                        disableDrawing={this.state.visualizationState !== VizState.INACTIVE}\n                    />\n                </span>\n            </div>\n        )\n    }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/style.css'\n\nimport App from './components/App'\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n"],"sourceRoot":""}