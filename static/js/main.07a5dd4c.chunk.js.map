{"version":3,"sources":["constvar.js","components/Settings.js","components/GridButton.js","components/Grid.js","components/ItemBarBtn.js","components/ItemBar.js","extfunctions.js","components/App.js","index.js"],"names":["CellStyles","background","color","transform","Alg","CellType","VizState","AlertTypes","Adjacent","Settings","props","state","expanded","onResize","bind","window","requestAnimationFrame","setState","mobile","width","innerWidth","console","log","this","addEventListener","removeEventListener","runButtonText","runButtonIcon","fontSize","className","styleNormal","visualizationState","opacity","dropDownIcon","style","display","onClick","prevState","name","id","onChange","changeSelectedAlgorithm","disabled","value","min","max","visualizationSpeed","e","changeVisSpeed","target","type","onMazeClick","onResetClick","React","Component","GridButton","useState","updateAnyway","compRef","useRef","cell","ref","onMouseDown","disableDrawing","clickFunction","x","y","onMouseOver","drawing","Grid","runningAlgorithm","event","pressed","tableContent","grid","map","row","rowContent","key","updateCell","handleMouse","onMouseLeave","onMouseUp","ItemBarBtn","parentHidden","boxShadow","border","trigger","text","position","closeOnDocumentClick","open","showTip","on","onClose","onTipClosed","tipText","ItemBar","setExpanded","hide","hidden","height","selectedItem","changeSelectedItem","activeAlert","removeAlert","sleep","ms","Promise","resolve","setTimeout","applyStyle","reference","effect","current","asyncForEach","array","callback","a","index","length","App","start","end","route","algorithm","item","drawOnGrid","changeAlgorithm","changeItem","onRunButtonClick","updateRoute","clearVisualization","createGrid","generateMaze","algFunctions","1","aStarPlus","2","BFS","3","4","DFS","rows","Math","floor","innerHeight","cols","newGrid","push","weight","parseInt","reverse","coord","abs","then","itemType","replaceCell","startOrEnd","prevX","prevY","forEach","wallList","random","wall","psgCount","direction","canBeOpened","splice","alg","foundRoute","comparator","b","gScore","queue","Node","dist","distance","adjacencyListD","algGrid","shift","next","d","unshift","currentCell","sort","setRoute","resetAll","c","adjacencyList","pop","flexDirection","topMargin","padding","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07a5dd4c.chunk.js","sourcesContent":["export const CellStyles = [\n    {\n        background: '#eee',\n        color: '#000',\n        transform: 'scale(1.0)'\n    },\n    {\n        background: '#000',\n        color: '#000',\n        transform: 'scale(1.0)'\n    },\n    {\n        background: '#36bf00',\n        transform: 'scale(0.7)'\n    },\n    {\n        background: '#a200ff',\n        transform: 'scale(0.7)',\n    },\n    {\n        background: '#38ffc7',\n        transform: 'scale(0.2)'\n    },\n    {\n        background: '#f05e54',\n        transform: 'scale(1.0)'\n    },\n    {\n        background: '#38ffc7',\n        transform: 'scale(1.0)'\n    }\n]\n\nexport const Alg = {\n    ASTAR: 1,\n    DIJKSTRA: 2,\n    BFS: 3,\n    DFS: 4\n}\n\nexport const CellType = {\n    NONE: 0,\n    WALL: 1,\n    START: 2,\n    END: 3,\n    VISITED: 4,\n    ROUTE: 5\n}\n\nexport const VizState = {\n    INACTIVE: 0,\n    RUNNING: 1,\n    FINISHED: 2\n}\n\nexport const AlertTypes = {\n    NOSTART: 'Please add a start node.',\n    NOEND: 'Please add an end node.'\n}\n\nexport const Adjacent = [\n    [-1,0],\n    [0,1],\n    [1,0],\n    [0,-1]\n]\n\n","import React from 'react';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport RangeSlider from 'react-bootstrap-range-slider';\nimport MdTrash from 'react-ionicons/lib/MdTrash'\nimport MdPlay from 'react-ionicons/lib/MdPlay'\nimport MdFastForward from 'react-ionicons/lib/MdFastforward'\nimport MdRefresh from 'react-ionicons/lib/MdRefresh'\nimport MdArrowDropdown from 'react-ionicons/lib/MdArrowDropdown'\nimport MdArrowDropup from 'react-ionicons/lib/MdArrowDropup'\n\nimport { Alg, VizState } from '../constvar'\n\nconst MOBILE_WIDTH = 800\n\nclass Settings extends React.Component { \n\n    constructor(props) {\n        super(props)\n        this.state = {\n            expanded: true\n        }\n        this.onResize = this.onResize.bind(this)\n    }\n\n    onResize() {\n        window.requestAnimationFrame(() => {\n            this.setState(() => {\n                let mobile = false\n                let width = window.innerWidth\n                if (width < MOBILE_WIDTH) mobile = true\n\n                return { \n                    width: width,\n                    mobile: mobile\n                }\n            })\n        })\n        console.log(this.state.mobile)\n    }\n\n    componentWillMount() {\n        this.setState({\n            width: window.innerWidth,\n            mobile: window.innerWidth < MOBILE_WIDTH \n        })\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.onResize)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.onResize)\n    }\n\n    render() {\n        let runButtonText = 'Run! '\n        let runButtonIcon = <MdPlay fontSize='17px' className='ionIcon'/>\n        let styleNormal = null\n\n        if (this.props.visualizationState === VizState.RUNNING) { \n            runButtonText = 'Skip visualization'\n            if (this.state.mobile) {\n                styleNormal = { opacity: 0.5 }\n            }\n            runButtonIcon = <MdFastForward fontSize='17px' className='ionIcon'/>\n        } else if (this.props.visualizationState === VizState.FINISHED) {\n            runButtonText = 'Clear route'\n            runButtonIcon = <MdRefresh fontSize='17px' className='ionIcon'/>\n        }\n\n        let dropDownIcon = <MdArrowDropup fontSize='25px' className='ionDropdown'/>\n        if (!this.state.expanded) {\n            dropDownIcon = <MdArrowDropdown fontSize='25px' className='ionDropdown'/>\n        }\n\n        return (\n            <div\n                className = { this.state.mobile ? 'topBarContainer' : null }\n            >\n                <button \n                    className = 'topBarToggle' \n                    style = { !this.state.mobile ? { display: 'none' } : null }\n                    onClick = {\n                        () => this.setState((prevState) => {\n                            return {expanded: !prevState.expanded }\n                        })\n                    }\n                >\n                    Main menu\n                    { dropDownIcon }\n                </button>\n\n                <div \n                    className = { this.state.mobile ? 'topBarMobile' : 'topBar' } \n                    style = {\n                        !this.state.expanded ? { display: 'none' } : styleNormal\n                    }\n                >\n                    <div>\n                        <label>Algorithm: </label>\n                        <select \n                            name='algorithms' \n                            id='algorithms'\n                            onChange={this.props.changeSelectedAlgorithm}\n                            disabled={this.props.visualizationState !== VizState.INACTIVE}\n                        >\n                             <option value={Alg.ASTAR}>A*</option>\n                             <option value={Alg.DIJKSTRA}>Dijkstra</option>\n                             <option value={Alg.BFS}>BFS</option>\n                             <option value={Alg.DFS}>DFS</option>\n                        </select>\n                    </div>\n                    <br/>\n\n                    <div className='sliderContainer'>\n                        <label>Visualization speed:</label>\n                        <RangeSlider\n                            min={10}\n                            max={100}\n                            value={this.props.visualizationSpeed}\n                            onChange={(e) => this.props.changeVisSpeed(e.target.value)}\n                        />\n                    </div>\n                    <br/>\n\n                    <button \n                        type='button' \n                        className='settingsButton'\n                        disabled={this.props.visualizationState === VizState.RUNNING }\n                        onClick={() => this.props.onMazeClick()}\n                    >\n                        Generate maze \n                    </button>\n                    <br/>\n\n                    <button \n                        type='button' \n                        className='resetButton'\n                        disabled={this.props.visualizationState === VizState.RUNNING }\n                        onClick={() => this.props.onResetClick(true)}\n                    >\n                        <MdTrash \n                            fontSize='17px' \n                            className='ionIcon' \n                            color={this.props.visualizationState === VizState.RUNNING ? '#666' : null}\n                        />\n                        Reset grid\n                    </button>\n                    <br/>\n\n                    <button \n                        style={this.props.visualizationState !== VizState.INACTIVE ? { background: '#eee' } : null}\n                        type='button' \n                        className='settingsButton'\n                        onClick={this.props.onClick}\n                    >\n                        {runButtonIcon}\n                        {runButtonText}\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Settings\n","import React, { useState, useRef } from 'react'\n\nfunction GridButton (props) { \n\n    const [, setState] = useState()\n\n    const updateAnyway = () => {\n        setState({})\n    }\n\n    const compRef = useRef()\n    props.cell.ref = compRef\n\n    return(\n        <button \n            ref={compRef}\n            type='button' \n            className='gridButton'\n\n            onMouseDown = {() => {\n                if (!props.disableDrawing) {\n                    props.clickFunction(props.x, props.y)\n                    updateAnyway()\n                }\n                \n            }}\n            onMouseOver = {() => {\n                if (props.drawing && !props.disableDrawing) {\n                    props.clickFunction(props.x, props.y)\n                    updateAnyway()\n                }\n            }}\n        >‎\n        </button>\n    )\n}\n\nexport default GridButton\n","import React from 'react';\n\nimport GridButton from './GridButton'\n\nclass Grid extends React.Component {\n\n    constructor() {\n        super()\n\n        this.state = {\n            drawing: false,\n            runningAlgorithm: false\n        }\n\n    }\n\n    handleMouse(event, pressed) {\n        this.setState({ drawing: pressed })\n    }\n\n    render() {\n\n        let y = -1\n        let tableContent = this.props.grid.map(row => { \n            let x = -1\n            y++\n            let rowContent = row.map(cell => {\n                x++\n                return(\n                    <td key={x}>\n                        <GridButton \n                            cell={this.props.grid[y][x]}\n                            x={x}\n                            y={y}\n                            clickFunction={this.props.updateCell}\n                            drawing={this.state.drawing}\n                            disableDrawing={this.props.disableDrawing}\n                        />\n                    </td>\n                )\n            })\n            return (\n                <tr key={y}>\n                    {rowContent}\n                </tr>\n            )\n        })\n\n        return (\n            <table \n                className='gridBase' \n                onMouseDown={(e) => {this.handleMouse(e, true)}}\n                onMouseLeave={(e) => this.handleMouse(e, false)}\n                onMouseUp={(e) => this.handleMouse(e, false)}\n            >\n                <tbody>\n                    {tableContent}\n                </tbody>\n            </table>\n        )\n    }\n}\n\nexport default Grid\n","import React from 'react'\nimport Popup from 'reactjs-popup'\n\nfunction ItemBarBtn(props) {\n    \n    let style = { display: 'table-row'}\n    if (props.parentHidden) {\n        style.display = 'none'\n    }\n    if (props.disabled) {\n        style.boxShadow = 'none'\n        style.border = '2px solid transparent'\n    }\n\n\n    return (\n        <Popup trigger={\n            <button\n                className='itemBarBtn'\n                style={ style }\n                onClick={ props.onClick }\n            >\n                <span\n                    style={{ color: props.color }}\n                >\n                    { '■ ' }\n                </span>\n                { props.text ?<p id='itemBarText'>{props.text}</p> : 'item' }\n            </button>\n            }\n            position='right center'\n            closeOnDocumentClick\n            open={props.showTip}\n            on='none'\n            onClose={props.onTipClosed}\n        >\n            {props.tipText}\n        </Popup>\n    )\n}\n\nexport default ItemBarBtn\n","import React, { useState } from 'react';\n\nimport ItemBarBtn from './ItemBarBtn'\nimport { CellType, AlertTypes } from '../constvar'\nimport MdArrowDropdown from 'react-ionicons/lib/MdArrowDropdown'\nimport MdArrowDropup from 'react-ionicons/lib/MdArrowDropup'\n\nfunction ItemBar(props) {\n    const [expanded, setExpanded] = useState(true) \n    let hide = !expanded || props.hidden\n    let dropDownIcon = <MdArrowDropup fontSize='25px' className='ionDropdown'/>\n    if (hide) {\n        dropDownIcon = <MdArrowDropdown fontSize='25px' className='ionDropdown'/>\n    }\n\n    return (\n        <div className='itemBarContainer'>\n            <button \n                className = 'itemBarToggle'\n                onClick={() => {\n                    if (!props.hidden) setExpanded(!expanded)\n                }}>\n                    Items\n                    { dropDownIcon }\n            </button>\n            <div \n                className = 'itemBar'\n                style={ \n                    !hide ? null \n                    : { \n                        height: '0%', \n                        opacity: 0\n                    }\n                }\n                    >\n                <ItemBarBtn \n                    parentHidden={!expanded}\n                    text={'Start node'}\n                    color={'#00ff37'}\n                    disabled={ props.selectedItem !== CellType.START }\n                    onClick={() => {props.changeSelectedItem(CellType.START)}}\n                    showTip={props.activeAlert === AlertTypes.NOSTART}\n                    tipText={props.activeAlert} \n                    onTipClosed={props.removeAlert}\n\n                />\n                <ItemBarBtn \n                    parentHidden={!expanded}\n                    text={'End node'}\n                    color={'#a200ff'}\n                    disabled={ props.selectedItem !== CellType.END }\n                    onClick={() => {props.changeSelectedItem(CellType.END)}}\n                    showTip={props.activeAlert === AlertTypes.NOEND}\n                    tipText={props.activeAlert} \n                    onTipClosed={props.removeAlert}\n\n                />\n                <ItemBarBtn \n                    parentHidden={!expanded}\n                    text={'Wall'}\n                    color={'#000'}\n                    disabled={ props.selectedItem !== CellType.WALL }\n                    onClick={() => props.changeSelectedItem(CellType.WALL)}\n\n                />\n                <ItemBarBtn \n                    parentHidden={!expanded}\n                    text={'Eraser'}\n                    color={'#fff'}\n                    disabled={ props.selectedItem !== CellType.NONE }\n                    onClick={() => props.changeSelectedItem(CellType.NONE)}\n\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default ItemBar\n","export function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\nexport function applyStyle(style, reference, effect = null) {\n    reference.current.style.background = style.background\n    reference.current.style.transform = style.transform\n    if (effect) {\n        effect(reference)\n    }\n}\n\nexport async function asyncForEach(array, callback) {\n    for (let index = 0; index < array.length; index++) {\n        await callback(array[index], index, array)\n    }\n}\n","import React from 'react'\n\nimport Settings from './Settings'\nimport Grid from './Grid'\nimport ItemBar from './ItemBar'\nimport { Alg, CellType, CellStyles, VizState, AlertTypes, Adjacent } from '../constvar'\nimport { sleep, asyncForEach, applyStyle } from '../extfunctions'\n\nconst CELLSIZE = 20\n\nclass App extends React.Component {\n\n    constructor() {\n        super()\n\n        this.grid = []\n        this.start = null\n        this.end = null\n        this.route = []\n\n        this.state = {\n            algorithm: Alg.ASTAR,\n            item: CellType.START,\n            activeAlert: null,\n            visualizationState: VizState.INACTIVE,\n            visualizationSpeed: 90\n        }\n\n        this.drawOnGrid = this.drawOnGrid.bind(this)\n        this.changeAlgorithm = this.changeAlgorithm.bind(this)\n        this.changeItem = this.changeItem.bind(this)\n        this.onRunButtonClick = this.onRunButtonClick.bind(this)\n        this.updateRoute = this.updateRoute.bind(this)\n        this.clearVisualization = this.clearVisualization.bind(this)\n        this.removeAlert = this.removeAlert.bind(this)\n        this.changeVisSpeed = this.changeVisSpeed.bind(this)\n        this.createGrid = this.createGrid.bind(this)\n        this.generateMaze = this.generateMaze.bind(this)\n\n        this.algFunctions = {\n            1: this.aStarPlus.bind(this),\n            2: this.BFS.bind(this),\n            3: this.BFS.bind(this),\n            4: this.DFS.bind(this)\n        }\n    }\n\n    componentDidMount() {\n        this.createGrid()\n    }\n\n    createGrid() {\n        let rows = Math.floor((window.innerHeight*0.7) / CELLSIZE)\n        let cols = Math.floor((window.innerWidth*0.65) / CELLSIZE)\n        let newGrid = []\n        for (let y=0;y<rows;y++) {\n            newGrid.push([])\n            for (let x=0;x<cols;x++) {\n                newGrid[y].push({\n                    type: CellType.NONE,\n                    weight: 0, // TODO\n                    x: x,\n                    y: y,\n                    ref: null\n                })\n            }\n        }\n        this.grid = newGrid\n        this.setState({})\n    }\n\n    changeItem(selectedItem) {\n        this.setState({item: selectedItem})\n    }\n\n    changeAlgorithm(event) {\n        this.setState({algorithm: parseInt(event.target.value)})\n    }\n\n    removeAlert() {\n        this.setState({activeAlert: null})\n    }\n\n    changeVisSpeed(value) {\n        this.setState({ visualizationSpeed: value })\n    }\n\n    onRunButtonClick() { \n        let start = this.start\n        let end = this.end\n        if (start === null) {\n            this.setState({activeAlert: AlertTypes.NOSTART})\n            return\n        } else if (end === null) {\n            this.setState({activeAlert: AlertTypes.NOEND})\n            return\n        }\n\n        if (this.state.visualizationState === VizState.RUNNING) {\n            this.setState({\n                visualizationState: VizState.FINISHED\n            })\n        } else if (this.state.visualizationState === VizState.FINISHED) {\n            this.clearVisualization()\n        } else {\n            this.setState({\n                start: start,\n                end: end,\n                visualizationState: VizState.RUNNING},\n                () => this.algFunctions[this.state.algorithm](this.grid[start.y][start.x],\n                    this.grid[end.y][end.x])\n            )\n        }\n    }\n\n    async updateRoute() { \n        this.route.reverse()\n        asyncForEach(this.route, async (coord) => {\n            if (this.state.visualizationState === VizState.RUNNING)\n                await sleep(Math.abs(this.state.visualizationSpeed-110)) \n            this.grid[coord.y][coord.x].type = CellType.ROUTE\n            applyStyle(CellStyles[CellType.ROUTE], this.grid[coord.y][coord.x].ref)\n\n        }).then(() => {\n\n            this.setState({visualizationState: VizState.FINISHED})\n        })\n    }\n\n    drawOnGrid(x, y, itemType = this.state.item) { \n\n        const replaceCell = (startOrEnd) => {\n                let prevX = startOrEnd.x\n                let prevY = startOrEnd.y\n                this.grid[prevY][prevX].type = CellType.NONE\n                applyStyle(CellStyles[CellType.NONE], this.grid[prevY][prevX].ref)\n        }\n\n        // Delete end- / start-nodes if they were drawn on\n        if (this.end && this.end.x === x && this.end.y === y ) {\n            replaceCell(this.end)\n            this.end = null \n        } else if (this.start && this.start.x === x && this.start.y === y ) {\n            replaceCell(this.start)\n            this.start = null\n        }\n        \n        // Special case: drawing end- or start-nodes\n        if (itemType ===  CellType.START) { \n            if (this.start) {\n                replaceCell(this.start)\n            }\n            this.start = {x: x, y: y}\n        } else if (itemType ===  CellType.END) { \n            if (this.end) {\n                replaceCell(this.end)\n            }\n            this.end = {x: x, y: y}\n        } \n\n        this.grid[y][x].type = itemType\n        applyStyle(CellStyles[itemType], this.grid[y][x].ref)\n    }\n\n    generateMaze() { // Prim's Algorithm\n        this.clearVisualization()\n        this.grid.forEach(row => {\n            row.forEach(cell => {\n                cell.type = CellType.WALL\n            })\n        })\n\n        let wallList = [this.grid[1][1]]\n\n        const canBeOpened = (cell) => {\n            let psgCount = 0\n            if (!cell) return false\n            Adjacent.forEach(direction => {\n                let x = cell.x+direction[0]\n                let y = cell.y+direction[1]\n                if (!this.grid[y] || !this.grid[y][x]) return\n                if (this.grid[y][x].type === CellType.NONE) psgCount += 1\n            })\n            return ( psgCount <= 1 )\n        }\n\n        while (wallList.length) {\n            let index = Math.floor(Math.random() * wallList.length)\n            let wall =  wallList[index]\n            if (canBeOpened(wall)) {\n                wall.type = CellType.NONE\n                Adjacent.forEach((direction) => {\n                    let x = wall.x+direction[0]\n                    let y = wall.y+direction[1]\n                    if (!this.grid[y] || !this.grid[y][x]) return\n                    wallList.push(this.grid[y][x])\n                })\n            }\n            wallList.splice(index,1)\n        }\n        \n        // draw results\n        this.grid.forEach(row => {\n            row.forEach(cell => {\n                this.drawOnGrid(cell.x, cell.y, cell.type)\n            })\n        })\n\n    }\n\n    async aStarPlus(start, end, alg = Alg.ASTAR) { \n\n        // initialize\n        let foundRoute = false\n        class Node {\n          constructor(x, y, dist, gScore) {\n            this.x = x\n            this.y = y\n            this.distance = dist\n            this.gScore = gScore\n          }\n        }\n        const comparator = (a,b) => { \n            return a.gScore > b.gScore ? 1 : -1\n        }\n\n        let queue = [] \n        queue.push(new Node(start.x,start.y,0,0))\n        let adjacencyListD = { \n            [start.x+':'+start.y]: null\n        }\n        let algGrid = this.grid\n\n        // perform search\n        while (queue.length) {\n            let current = queue.shift()\n\n            if (current.x === end.x && current.y === end.y) { // found\n                foundRoute = true\n                break\n            }\n\n            Adjacent.forEach((direction) => {\n                let x = current.x+direction[0]\n                let y = current.y+direction[1]\n                if (!algGrid[y]) return\n                if (!algGrid[y][x]) return\n                let next = algGrid[y][x]\n                if (next.type === CellType.WALL ||\n                   (next.x === start.x && next.y === start.y)) return\n\n                if (!adjacencyListD[x+':'+y]) { // Not yet discovered\n                    adjacencyListD[x+':'+y] = {\n                        x: current.x, \n                        y: current.y,\n                        d: 9999\n                    }\n                }\n\n                let distance = current.distance+1  \n                const multiplier = 1.0\n                let gScore = distance + multiplier*(Math.abs(end.x - x) + Math.abs(end.y - y))\n\n                if (distance < adjacencyListD[x+':'+y].d) { // Found a shorter path\n                    adjacencyListD[x+':'+y] = {\n                        x: current.x, \n                        y: current.y,\n                        d: distance\n                    }\n                    if (alg !== Alg.DFS) {\n                        queue.push(new Node(x, y, distance,gScore))\n                    }\n                    else {\n                        queue.unshift(new Node(x, y, distance,gScore))\n                    }\n                }\n            })\n            let currentCell = algGrid[current.y][current.x]\n\n            if (currentCell.type !== CellType.START && currentCell.type !== CellType.VISITED) { // Mark current as visited\n                currentCell.type = CellType.VISITED \n                if ( this.state.visualizationState === VizState.RUNNING ) { // Running -> run animation\n                    await sleep(Math.abs(this.state.visualizationSpeed-110)) \n                    applyStyle(CellStyles[CellType.VISITED], currentCell.ref, (ref) => {\n                        sleep(400).then(() => {\n                            ref.current.style.transform = 'scale(1.0)'\n                        })\n                    })\n                } else {\n                    applyStyle(CellStyles[6], currentCell.ref) \n                }\n            }\n\n            if (alg === Alg.ASTAR ) {\n                queue.sort(comparator)\n            }\n        }\n\n        // draw results\n        if (foundRoute) {\n            this.setRoute(adjacencyListD,end) \n        }\n        if (this.state.visualizationState === VizState.RUNNING) {\n            await sleep(100)\n        }\n        this.updateRoute()\n    }\n\n    async DFS(start, end) {\n        this.aStarPlus(start, end, Alg.DFS)\n    }\n        \n    async BFS(start, end) {\n        this.aStarPlus(start, end, Alg.BFS)\n    }\n\n    clearVisualization(resetAll = false) {\n        this.route = []\n\n        this.setState(() => {\n            this.grid.map((row) => {\n                row = row.map((c) => {\n                    if (this.start && c.x === this.start.x && c.y === this.start.y) \n                        c.type = CellType.START\n                    else if (this.end && c.x === this.end.x && c.y === this.end.y) \n                        c.type = CellType.END\n                    else if (resetAll ||\n                    c.type === CellType.VISITED ||\n                    c.type === CellType.ROUTE) {\n                        applyStyle(CellStyles[CellType.NONE], c.ref)\n                        c.type = CellType.NONE\n                    }\n                    return c\n                })\n                return row\n            })\n            return { visualizationState: VizState.INACTIVE }\n        })\n        if (resetAll) {\n            this.start = null\n            this.end = null\n        }\n            \n    }\n\n    setRoute(adjacencyList, end) {\n        this.route.push({\n            x: end.x, \n            y: end.y\n        })\n        \n        let index = end.x+':'+end.y\n        while (adjacencyList[index] !== null) {\n            this.route.push(adjacencyList[index])\n            index = adjacencyList[index].x+':'+adjacencyList[index].y\n        }\n        console.log('Route length: '+this.route.length)\n        this.route.shift() // remove start\n        this.route.pop() // and end\n    }\n\n    render() {\n        return (\n            <div>\n                <Settings\n                    changeSelectedAlgorithm={this.changeAlgorithm}\n                    onClick={this.onRunButtonClick}\n                    onMazeClick={this.generateMaze}\n                    onResetClick={this.clearVisualization}\n                    visualizationState={this.state.visualizationState}\n                    changeVisSpeed={this.changeVisSpeed}\n                    visualizationSpeed={this.state.visualizationSpeed}\n                    activeAlert={this.state.activeAlert}\n                />\n                <span \n                    style = {{ \n                        width: '100%', \n                        height: '100%', \n                        display: 'flex' , \n                        flexDirection: 'row' , \n                        topMargin: '100', \n                        position: 'fixed',\n                        padding: '0px 0px'\n                    }}>\n                    <ItemBar\n                        changeSelectedItem={this.changeItem}\n                        selectedItem={this.state.item}\n                        hidden={this.state.visualizationState !== VizState.INACTIVE}\n                        activeAlert={this.state.activeAlert}\n                        removeAlert={this.removeAlert}\n                    />\n                    <Grid\n                        updateCell={this.drawOnGrid}\n                        selectedItem={this.state.item}\n                        grid={this.grid}\n                        disableDrawing={this.state.visualizationState !== VizState.INACTIVE}\n                    />\n                </span>\n            </div>\n        )\n    }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/style.css'\n\nimport App from './components/App'\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n"],"sourceRoot":""}