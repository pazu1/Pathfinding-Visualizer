{"version":3,"sources":["components/MobileContext.js","constvar.js","components/TopBar.js","components/Settings.js","components/GridButton.js","components/Grid.js","components/ItemBarBtn.js","components/ItemBar.js","components/Notification.js","extfunctions.js","components/App.js","index.js"],"names":["MobileContext","React","createContext","MobileStateProvider","state","mobile","setMobile","newMobile","setState","this","Provider","value","props","children","Component","CellStyles","background","color","transform","Alg","CellType","VizState","AlertTypes","Adjacent","TopBar","className","style","expanded","display","name","id","onChange","changeSelectedAlgorithm","disabled","visualizationState","min","max","visualizationSpeed","e","changeVisSpeed","target","type","onClick","onMazeClick","onResetClick","fontSize","runButtonIcon","runButtonText","Settings","onResize","bind","window","requestAnimationFrame","width","innerWidth","context","addEventListener","removeEventListener","dropDownIcon","prevState","contextType","GridButton","useState","updateAnyway","compRef","useRef","cell","ref","onMouseDown","disableDrawing","clickFunction","x","y","onMouseOver","drawing","Grid","runningAlgorithm","event","pressed","tableContent","grid","map","row","rowContent","key","updateCell","handleMouse","onMouseLeave","onMouseUp","ItemBarBtn","boxShadow","border","trigger","text","position","closeOnDocumentClick","open","showTip","on","onClose","onTipClosed","tipText","ItemBar","setExpanded","hide","hidden","sProps","useSpring","height","opacity","config","wobbly","stiff","aStyle","div","selectedItem","changeSelectedItem","activeAlert","removeAlert","Notification","useContext","margin","active","bottom","prevWasAlert","useEffect","current","usePrevious","isAlert","console","log","sleep","ms","Promise","resolve","setTimeout","applyStyle","reference","effect","asyncForEach","array","callback","a","index","length","App","start","end","route","algorithm","item","drawOnGrid","changeAlgorithm","changeItem","onRunButtonClick","updateRoute","clearVisualization","createGrid","generateMazeSimple","algFunctions","1","aStarPlus","2","BFS","3","DFS","rows","Math","floor","innerHeight","cols","newGrid","push","parseInt","reverse","coord","abs","then","itemType","replaceCell","startOrEnd","prevX","prevY","forEach","wallList","random","wall","psgCount","direction","canBeOpened","splice","alg","foundRoute","comparator","b","gScore","queue","Node","dist","distance","adjacencyListD","algGrid","shift","next","d","unshift","currentCell","sort","setRoute","resetAll","c","adjacencyList","pop","flexDirection","topMargin","padding","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f99a88f5.chunk.js","sourcesContent":["import React from 'react'\n\nconst MobileContext = React.createContext()\n\nclass MobileStateProvider extends React.Component {\n    \n    state = {\n        mobile: false\n    }\n\n    setMobile = (newMobile) => {\n        this.setState({ mobile: newMobile })\n    }\n\n    render() {\n        const { mobile } = this.state\n        const { setMobile } = this\n\n        return ( \n            <MobileContext.Provider \n                value={{\n                    mobile,\n                    setMobile\n                }}\n            >\n                {this.props.children}\n            </MobileContext.Provider>\n        )\n    }\n}\n\nexport default MobileContext\n\nexport { MobileStateProvider }\n    \n","export const CellStyles = [\n    {\n        background: '#eee',\n        color: '#000',\n        transform: 'scale(1.0)'\n    },\n    {\n        background: '#000',\n        color: '#000',\n        transform: 'scale(1.0)'\n    },\n    {\n        background: '#36bf00',\n        transform: 'scale(0.7)'\n    },\n    {\n        background: '#a200ff',\n        transform: 'scale(0.7)',\n    },\n    {\n        background: '#38ffc7',\n        transform: 'scale(0.2)'\n    },\n    {\n        background: '#f05e54',\n        transform: 'scale(1.0)'\n    },\n    {\n        background: '#38ffc7',\n        transform: 'scale(1.0)'\n    }\n]\n\nexport const Alg = {\n    ASTAR: 1,\n    BFS: 2,\n    DFS: 3\n}\n\nexport const CellType = {\n    NONE: 0,\n    WALL: 1,\n    START: 2,\n    END: 3,\n    VISITED: 4,\n    ROUTE: 5\n}\n\nexport const VizState = {\n    INACTIVE: 0,\n    RUNNING: 1,\n    FINISHED: 2\n}\n\nexport const AlertTypes = {\n    NOSTART: 'Please add a start node.',\n    NOEND: 'Please add an end node.'\n}\n\nexport const Adjacent = [\n    [-1,0],\n    [0,1],\n    [1,0],\n    [0,-1]\n]\n\n","import React from 'react'\nimport RangeSlider from 'react-bootstrap-range-slider';\nimport MdTrash from 'react-ionicons/lib/MdTrash'\n\nimport { VizState, Alg } from '../constvar'\n\nfunction TopBar(props) {\n\n    return (\n        <div \n            className = { props.mobile ? 'topBarMobile' : 'topBar' } \n            style = {\n                props.expanded && props.mobile ? { display: 'none' } : null\n            }\n        >\n            <div\n                style={ props.mobile ? { display: 'none' } : null }\n            >\n                <label>Algorithm: </label>\n                <select \n                    name='algorithms' \n                    id='algorithms'\n                    onChange={props.changeSelectedAlgorithm}\n                    disabled={props.visualizationState !== VizState.INACTIVE}\n                >\n                     <option value={Alg.ASTAR}>A*</option>\n                     <option value={Alg.BFS}>BFS</option>\n                     <option value={Alg.DFS}>DFS</option>\n                </select>\n            </div>\n            <br/>\n\n            <div className='sliderContainer'>\n                <label>Visualization speed:</label>\n                <RangeSlider\n                    min={10}\n                    max={100}\n                    value={props.visualizationSpeed}\n                    onChange={(e) => props.changeVisSpeed(e.target.value)}\n                />\n            </div>\n            <br/>\n\n            <button \n                type='button' \n                className='settingsButton'\n                disabled={props.visualizationState === VizState.RUNNING }\n                onClick={() => props.onMazeClick()}\n            >\n                Generate maze \n            </button>\n            <br/>\n\n            <button \n                type='button' \n                className='resetButton'\n                disabled={props.visualizationState === VizState.RUNNING }\n                onClick={() => props.onResetClick(true)}\n            >\n                <MdTrash \n                    fontSize='17px' \n                    className='ionIcon' \n                    color={props.visualizationState === VizState.RUNNING ? '#666' : null}\n                />\n                Reset grid\n            </button>\n            <br/>\n\n            <button \n                style={ props.mobile ? { display: 'none' } : null }\n                type='button' \n                className='settingsButton'\n                onClick={props.onClick}\n            >\n                {props.runButtonIcon}\n                {props.runButtonText}\n            </button>\n        </div>\n    )\n\n}\n\nexport default TopBar\n","import React from 'react';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport MdArrowDropdown from 'react-ionicons/lib/MdArrowDropdown'\nimport MdArrowDropup from 'react-ionicons/lib/MdArrowDropup'\nimport MdFastForward from 'react-ionicons/lib/MdFastforward'\nimport MdRefresh from 'react-ionicons/lib/MdRefresh'\nimport MdPlay from 'react-ionicons/lib/MdPlay'\n\nimport MobileContext from './MobileContext'\nimport TopBar from './TopBar'\nimport { Alg, VizState } from '../constvar'\n\nconst MOBILE_WIDTH = 800\n\nclass Settings extends React.Component { \n\n    static contextType = MobileContext\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            expanded: true\n        }\n        this.onResize = this.onResize.bind(this)\n    }\n\n    onResize() {\n        window.requestAnimationFrame(() => {\n            this.setState(() => {\n                let width = window.innerWidth\n                let mobile =  (width < MOBILE_WIDTH)\n\n                this.context.setMobile(mobile)\n                return { \n                    width: width,\n                }\n            })\n        })\n    }\n\n    componentWillMount() {\n        this.setState({\n            width: window.innerWidth,\n        })\n        this.context.setMobile(window.innerWidth < MOBILE_WIDTH)\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.onResize)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.onResize)\n    }\n\n    render() {\n\n        const { mobile } = this.context\n\n        let runButtonText = 'Run! '\n        let runButtonIcon = <MdPlay fontSize='17px' className='ionIcon'/>\n\n        if (this.props.visualizationState === VizState.RUNNING) { \n            runButtonText = 'Skip visualization'\n            runButtonIcon = <MdFastForward fontSize='17px' className='ionIcon'/>\n        } else if (this.props.visualizationState === VizState.FINISHED) {\n            runButtonText = 'Clear path'\n            runButtonIcon = <MdRefresh fontSize='17px' className='ionIcon'/>\n        } \n\n        let dropDownIcon = <MdArrowDropup fontSize='25px' className='ionDropdown'/>\n        if (!this.props.expanded) {\n            dropDownIcon = <MdArrowDropdown fontSize='25px' className='ionDropdown'/>\n        }\n\n        return (\n            <div\n                className = { mobile ? 'topBarContainer' : null }\n            >\n                <button \n                    className = 'topBarToggle' \n                    style = { !mobile ? { display: 'none' } : null }\n                    onClick = {\n                        () => this.setState((prevState) => {\n                            return {expanded: !prevState.expanded }\n                        })\n                    }\n                >\n                    Options\n                    { dropDownIcon }\n                </button>\n\n                <TopBar\n                    expanded={this.state.expanded}\n                    mobile={mobile}\n                    changeSelectedAlgorithm={this.props.changeSelectedAlgorithm}\n                    visualizationState={this.props.visualizationState}\n                    onClick={this.props.onClick}\n                    changeVisSpeed={this.props.changeVisSpeed}\n                    visualizationSpeed={this.props.visualizationSpeed}\n                    runButtonText={ runButtonText }\n                    runButtonIcon={ runButtonIcon }\n                    onMazeClick={this.props.onMazeClick}\n                    onResetClick={this.props.onResetClick}\n                />\n                <div \n                    className='mobileAlgSelect'\n                    style={ !mobile ? { display: 'none' } : null }\n                >\n                    <label>Algorithm: </label>\n                    <select \n                        name='algorithms' \n                        id='algorithms'\n                        onChange={this.props.changeSelectedAlgorithm}\n                        disabled={this.props.visualizationState !== VizState.INACTIVE}\n                    >\n                         <option value={Alg.ASTAR}>A*</option>\n                         <option value={Alg.BFS}>BFS</option>\n                         <option value={Alg.DFS}>DFS</option>\n                    </select>\n                </div>\n                <button \n                    className='mobileRunButton'\n                    style={ !mobile ? { display: 'none' } : null }\n                    type='button' \n                    onClick={this.props.onClick}\n                >\n                    {runButtonIcon}\n                    {runButtonText}\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Settings\n","import React, { useState, useRef } from 'react'\n\nfunction GridButton (props) { \n\n    const [, setState] = useState()\n\n    const updateAnyway = () => {\n        setState({})\n    }\n\n    const compRef = useRef()\n    props.cell.ref = compRef\n\n    return(\n        <button \n            ref={compRef}\n            type='button' \n            className='gridButton'\n\n            onMouseDown = {() => {\n                if (!props.disableDrawing) {\n                    props.clickFunction(props.x, props.y)\n                    updateAnyway()\n                }\n                \n            }}\n            onMouseOver = {() => {\n                if (props.drawing && !props.disableDrawing) {\n                    props.clickFunction(props.x, props.y)\n                    updateAnyway()\n                }\n            }}\n        >‎\n        </button>\n    )\n}\n\nexport default GridButton\n","import React from 'react';\n\nimport GridButton from './GridButton'\n\nclass Grid extends React.Component {\n\n    constructor() {\n        super()\n\n        this.state = {\n            drawing: false,\n            runningAlgorithm: false\n        }\n\n    }\n\n    handleMouse(event, pressed) {\n        this.setState({ drawing: pressed })\n    }\n\n    render() {\n\n        let y = -1\n        let tableContent = this.props.grid.map(row => { \n            let x = -1\n            y++\n            let rowContent = row.map(cell => {\n                x++\n                return(\n                    <td key={x}>\n                        <GridButton \n                            cell={this.props.grid[y][x]}\n                            x={x}\n                            y={y}\n                            clickFunction={this.props.updateCell}\n                            drawing={this.state.drawing}\n                            disableDrawing={this.props.disableDrawing}\n                        />\n                    </td>\n                )\n            })\n            return (\n                <tr key={y}>\n                    {rowContent}\n                </tr>\n            )\n        })\n\n        return (\n            <table \n                className='gridBase' \n                onMouseDown={(e) => {this.handleMouse(e, true)}}\n                onMouseLeave={(e) => this.handleMouse(e, false)}\n                onMouseUp={(e) => this.handleMouse(e, false)}\n            >\n                <tbody>\n                    {tableContent}\n                </tbody>\n            </table>\n        )\n    }\n}\n\nexport default Grid\n","import React from 'react'\nimport Popup from 'reactjs-popup'\n\nfunction ItemBarBtn(props) {\n    \n    let style = { display: 'table-row'}\n    if (props.disabled) {\n        style.boxShadow = 'none'\n        style.border = '2px solid transparent'\n    }\n\n\n    return (\n        <Popup trigger={\n            <button\n                className='itemBarBtn'\n                style={ style }\n                onClick={ props.onClick }\n            >\n                <span\n                    style={{ color: props.color }}\n                >\n                    { '■ ' }\n                </span>\n                { props.text ?<p id='itemBarText'>{props.text}</p> : 'item' }\n            </button>\n            }\n            position='right center'\n            closeOnDocumentClick\n            open={props.showTip}\n            on='none'\n            onClose={props.onTipClosed}\n        >\n            {props.tipText}\n        </Popup>\n    )\n}\n\nexport default ItemBarBtn\n","import React, { useState } from 'react'\n\nimport ItemBarBtn from './ItemBarBtn'\nimport { CellType, AlertTypes } from '../constvar'\nimport MdArrowDropdown from 'react-ionicons/lib/MdArrowDropdown'\nimport MdArrowDropup from 'react-ionicons/lib/MdArrowDropup'\nimport { useSpring, animated, config } from 'react-spring'\n\nfunction ItemBar(props) {\n    const [expanded, setExpanded] = useState(true) \n    let hide = !expanded || props.hidden\n    let dropDownIcon = <MdArrowDropup fontSize='25px' className='ionDropdown'/>\n    if (hide) {\n        dropDownIcon = <MdArrowDropdown fontSize='25px' className='ionDropdown'/>\n    }\n\n    const sProps = useSpring({\n        height: !hide ? 330 : 0,\n        opacity: !hide ? 1 : 0,\n        config: key => (key === 'height' ? config.wobbly : config.stiff)\n    })\n    \n    const aStyle = {\n        height: sProps.height,\n        opacity: sProps.opacity\n    }\n\n    return (\n        <div className='itemBarContainer'>\n            <button \n                className = 'itemBarToggle'\n                onClick={() => {\n                    if (!props.hidden) setExpanded(!expanded)\n                }}>\n                    Items\n                    { dropDownIcon }\n            </button>\n            <animated.div \n                className = 'itemBar'\n                style={aStyle}\n                    >\n                <ItemBarBtn \n                    text={'Start node'}\n                    color={'#36bf00'}\n                    disabled={ props.selectedItem !== CellType.START }\n                    onClick={() => {props.changeSelectedItem(CellType.START)}}\n                    showTip={props.activeAlert === AlertTypes.NOSTART}\n                    tipText={props.activeAlert} \n                    onTipClosed={props.removeAlert}\n\n                />\n                <ItemBarBtn \n                    text={'End node'}\n                    color={'#a200ff'}\n                    disabled={ props.selectedItem !== CellType.END }\n                    onClick={() => {props.changeSelectedItem(CellType.END)}}\n                    showTip={props.activeAlert === AlertTypes.NOEND}\n                    tipText={props.activeAlert} \n                    onTipClosed={props.removeAlert}\n\n                />\n                <ItemBarBtn \n                    text={'Wall'}\n                    color={'#000'}\n                    disabled={ props.selectedItem !== CellType.WALL }\n                    onClick={() => props.changeSelectedItem(CellType.WALL)}\n\n                />\n                <ItemBarBtn \n                    text={'Eraser'}\n                    color={'#fff'}\n                    disabled={ props.selectedItem !== CellType.NONE }\n                    onClick={() => props.changeSelectedItem(CellType.NONE)}\n\n                />\n            </animated.div>\n        </div>\n    )\n}\n\nexport default ItemBar\n","import React, {useEffect, useRef, useContext} from 'react'\nimport {useSpring, animated} from 'react-spring'\nimport MobileContext from './MobileContext'\n\nconst ALERTCOLOR = '#f05e54'\nconst MOBILEMARGIN = 90\n\nfunction usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}\n\nfunction Notification (props) { \n\n    const { mobile } = useContext(MobileContext)\n    let margin = 30\n    if (mobile) margin = MOBILEMARGIN\n\n    const sProps = useSpring({\n        height: props.active ? 50 : 0,\n        opacity: props.active ? 1 : 0,\n        bottom: props.active ? margin : 0,\n    })\n\n    const prevWasAlert = usePrevious(props.isAlert)\n\n    const style = {\n        height: sProps.height,\n        opacity: sProps.opacity,\n        background: props.isAlert && prevWasAlert ? ALERTCOLOR : null,\n        bottom: sProps.bottom\n    }\n\n    console.log(mobile)\n\n    return (\n        <animated.div \n            className='notification'\n            style={style}>\n            <p>{props.active ? props.text : null}</p>\n        </animated.div>\n    )\n}\n\nexport default Notification\n","export function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\nexport function applyStyle(style, reference, effect = null) {\n    reference.current.style.background = style.background\n    reference.current.style.transform = style.transform\n    if (effect) {\n        effect(reference)\n    }\n}\n\nexport async function asyncForEach(array, callback) {\n    for (let index = 0; index < array.length; index++) {\n        await callback(array[index], index, array)\n    }\n}\n","import React from 'react'\n\nimport Settings from './Settings'\nimport Grid from './Grid'\nimport ItemBar from './ItemBar'\nimport Notification from './Notification'\nimport { Alg, CellType, CellStyles, VizState, AlertTypes, Adjacent } from '../constvar'\nimport { sleep, asyncForEach, applyStyle } from '../extfunctions'\nimport { MobileStateProvider } from './MobileContext'\n\nconst CELLSIZE = 20\n\nclass App extends React.Component {\n\n    constructor() {\n        super()\n\n        this.grid = []\n        this.start = null\n        this.end = null\n        this.route = []\n\n        this.state = {\n            algorithm: Alg.ASTAR,\n            item: CellType.START,\n            activeAlert: null,\n            visualizationState: VizState.INACTIVE,\n            visualizationSpeed: 90\n        }\n\n        this.drawOnGrid = this.drawOnGrid.bind(this)\n        this.changeAlgorithm = this.changeAlgorithm.bind(this)\n        this.changeItem = this.changeItem.bind(this)\n        this.onRunButtonClick = this.onRunButtonClick.bind(this)\n        this.updateRoute = this.updateRoute.bind(this)\n        this.clearVisualization = this.clearVisualization.bind(this)\n        this.removeAlert = this.removeAlert.bind(this)\n        this.changeVisSpeed = this.changeVisSpeed.bind(this)\n        this.createGrid = this.createGrid.bind(this)\n        this.generateMazeSimple = this.generateMazeSimple.bind(this)\n\n        this.algFunctions = {\n            1: this.aStarPlus.bind(this),\n            2: this.BFS.bind(this),\n            3: this.DFS.bind(this)\n        }\n    }\n\n    componentDidMount() {\n        this.createGrid()\n    }\n\n    createGrid() {\n        let rows = Math.floor((window.innerHeight*0.7) / CELLSIZE)\n        let cols = Math.floor((window.innerWidth*0.65) / CELLSIZE)\n        let newGrid = []\n        for (let y=0;y<rows;y++) {\n            newGrid.push([])\n            for (let x=0;x<cols;x++) {\n                newGrid[y].push({\n                    type: CellType.NONE,\n                    x: x,\n                    y: y,\n                    ref: null\n                })\n            }\n        }\n        this.grid = newGrid\n        this.setState({})\n    }\n\n    changeItem(selectedItem) {\n        this.setState({item: selectedItem})\n    }\n\n    changeAlgorithm(event) {\n        this.setState({algorithm: parseInt(event.target.value)})\n    }\n\n    removeAlert() {\n        this.setState({activeAlert: null})\n    }\n\n    changeVisSpeed(value) {\n        this.setState({ visualizationSpeed: value })\n    }\n\n    onRunButtonClick() { \n        let start = this.start\n        let end = this.end\n        if (start === null) {\n            this.setState({activeAlert: AlertTypes.NOSTART})\n            return\n        } else if (end === null) {\n            this.setState({activeAlert: AlertTypes.NOEND})\n            return\n        }\n\n        if (this.state.visualizationState === VizState.RUNNING) {\n            this.setState({\n                visualizationState: VizState.FINISHED\n            })\n        } else if (this.state.visualizationState === VizState.FINISHED) {\n            this.clearVisualization()\n        } else {\n            this.setState({\n                start: start,\n                end: end,\n                visualizationState: VizState.RUNNING},\n                () => this.algFunctions[this.state.algorithm](this.grid[start.y][start.x],\n                    this.grid[end.y][end.x])\n            )\n        }\n    }\n\n    async updateRoute() { \n        this.route.reverse()\n        asyncForEach(this.route, async (coord) => {\n            if (this.state.visualizationState === VizState.RUNNING)\n                await sleep(Math.abs(this.state.visualizationSpeed-110)) \n            this.grid[coord.y][coord.x].type = CellType.ROUTE\n            applyStyle(CellStyles[CellType.ROUTE], this.grid[coord.y][coord.x].ref)\n\n        }).then(() => {\n\n            this.setState({visualizationState: VizState.FINISHED})\n        })\n    }\n\n    drawOnGrid(x, y, itemType = this.state.item) { \n\n        const replaceCell = (startOrEnd) => {\n                let prevX = startOrEnd.x\n                let prevY = startOrEnd.y\n                this.grid[prevY][prevX].type = CellType.NONE\n                applyStyle(CellStyles[CellType.NONE], this.grid[prevY][prevX].ref)\n        }\n\n        // Delete end- / start-nodes if they were drawn on\n        if (this.end && this.end.x === x && this.end.y === y ) {\n            replaceCell(this.end)\n            this.end = null \n        } else if (this.start && this.start.x === x && this.start.y === y ) {\n            replaceCell(this.start)\n            this.start = null\n        }\n        \n        // Special case: drawing end- or start-nodes\n        if (itemType ===  CellType.START) { \n            if (this.start) {\n                replaceCell(this.start)\n            }\n            this.start = {x: x, y: y}\n        } else if (itemType ===  CellType.END) { \n            if (this.end) {\n                replaceCell(this.end)\n            }\n            this.end = {x: x, y: y}\n        } \n\n        this.grid[y][x].type = itemType\n        applyStyle(CellStyles[itemType], this.grid[y][x].ref)\n    }\n\n    generateMazeSimple() { // Prim's Algorithm\n        this.clearVisualization()\n        this.grid.forEach(row => {\n            row.forEach(cell => {\n                cell.type = CellType.WALL\n            })\n        })\n\n        let wallList = [this.grid[1][1]]\n\n        const canBeOpened = (cell) => {\n            let psgCount = 0\n            if (!cell) return false\n            Adjacent.forEach(direction => {\n                let x = cell.x+direction[0]\n                let y = cell.y+direction[1]\n                if (!this.grid[y] || !this.grid[y][x]) return\n                if (this.grid[y][x].type === CellType.NONE) psgCount += 1\n            })\n            return ( psgCount <= 1 )\n        }\n\n        while (wallList.length) {\n            let index = Math.floor(Math.random() * wallList.length)\n            let wall =  wallList[index]\n            if (canBeOpened(wall)) {\n                wall.type = CellType.NONE\n                Adjacent.forEach((direction) => {\n                    let x = wall.x+direction[0]\n                    let y = wall.y+direction[1]\n                    if (!this.grid[y] || !this.grid[y][x]) return\n                    wallList.push(this.grid[y][x])\n                })\n            }\n            wallList.splice(index,1)\n        }\n        \n        // draw results\n        this.grid.forEach(row => {\n            row.forEach(cell => {\n                this.drawOnGrid(cell.x, cell.y, cell.type)\n            })\n        })\n\n    }\n\n    async aStarPlus(start, end, alg = Alg.ASTAR) { \n\n        // initialize\n        let foundRoute = false\n        class Node {\n          constructor(x, y, dist, gScore) {\n            this.x = x\n            this.y = y\n            this.distance = dist\n            this.gScore = gScore\n          }\n        }\n        const comparator = (a,b) => { \n            return a.gScore > b.gScore ? 1 : -1\n        }\n\n        let queue = [] \n        queue.push(new Node(start.x,start.y,0,0))\n        let adjacencyListD = { \n            [start.x+':'+start.y]: null\n        }\n        let algGrid = this.grid\n\n        // perform search\n        while (queue.length) {\n            let current = queue.shift()\n\n            if (current.x === end.x && current.y === end.y) { // found\n                foundRoute = true\n                break\n            }\n\n            Adjacent.forEach((direction) => {\n                let x = current.x+direction[0]\n                let y = current.y+direction[1]\n                if (!algGrid[y]) return\n                if (!algGrid[y][x]) return\n                let next = algGrid[y][x]\n                if (next.type === CellType.WALL ||\n                   (next.x === start.x && next.y === start.y)) return\n\n                if (!adjacencyListD[x+':'+y]) { // Not yet discovered\n                    adjacencyListD[x+':'+y] = {\n                        x: current.x, \n                        y: current.y,\n                        d: 9999\n                    }\n                }\n\n                let distance = current.distance+1  \n                const multiplier = 1.0\n                let gScore = distance + multiplier*(Math.abs(end.x - x) + Math.abs(end.y - y))\n\n                if (distance < adjacencyListD[x+':'+y].d) { // Found a shorter path\n                    adjacencyListD[x+':'+y] = {\n                        x: current.x, \n                        y: current.y,\n                        d: distance\n                    }\n                    if (alg !== Alg.DFS) {\n                        queue.push(new Node(x, y, distance,gScore))\n                    }\n                    else {\n                        queue.unshift(new Node(x, y, distance,gScore))\n                    }\n                }\n            })\n            let currentCell = algGrid[current.y][current.x]\n\n            if (currentCell.type !== CellType.START && currentCell.type !== CellType.VISITED) { // Mark current as visited\n                currentCell.type = CellType.VISITED \n                if ( this.state.visualizationState === VizState.RUNNING ) { // Running -> run animation\n                    await sleep(Math.abs(this.state.visualizationSpeed-110)) \n                    applyStyle(CellStyles[CellType.VISITED], currentCell.ref, (ref) => {\n                        sleep(400).then(() => {\n                            ref.current.style.transform = 'scale(1.0)'\n                        })\n                    })\n                } else {\n                    applyStyle(CellStyles[6], currentCell.ref) \n                }\n            }\n\n            if (alg === Alg.ASTAR ) {\n                queue.sort(comparator)\n            }\n        }\n\n        // draw results\n        if (foundRoute) {\n            this.setRoute(adjacencyListD,end) \n        }\n        if (this.state.visualizationState === VizState.RUNNING) {\n            await sleep(100)\n        }\n        this.updateRoute()\n    }\n\n    async DFS(start, end) {\n        this.aStarPlus(start, end, Alg.DFS)\n    }\n        \n    async BFS(start, end) {\n        this.aStarPlus(start, end, Alg.BFS)\n    }\n\n    clearVisualization(resetAll = false) {\n        this.route = []\n\n        this.setState(() => {\n            this.grid.map((row) => {\n                row = row.map((c) => {\n                    if (this.start && c.x === this.start.x && c.y === this.start.y) \n                        c.type = CellType.START\n                    else if (this.end && c.x === this.end.x && c.y === this.end.y) \n                        c.type = CellType.END\n                    else if (resetAll ||\n                    c.type === CellType.VISITED ||\n                    c.type === CellType.ROUTE) {\n                        applyStyle(CellStyles[CellType.NONE], c.ref)\n                        c.type = CellType.NONE\n                    }\n                    return c\n                })\n                return row\n            })\n            return { visualizationState: VizState.INACTIVE }\n        })\n        if (resetAll) {\n            this.start = null\n            this.end = null\n        }\n            \n    }\n\n    setRoute(adjacencyList, end) {\n        this.route.push({\n            x: end.x, \n            y: end.y\n        })\n        \n        let index = end.x+':'+end.y\n        while (adjacencyList[index] !== null) {\n            this.route.push(adjacencyList[index])\n            index = adjacencyList[index].x+':'+adjacencyList[index].y\n        }\n        console.log('Route length: '+this.route.length)\n        this.route.shift() // remove start\n        this.route.pop() // and end\n    }\n\n    render() {\n        return (\n            <div>\n                <MobileStateProvider>\n                    <Notification\n                        active={this.state.visualizationState === VizState.FINISHED}\n                        isAlert={!this.route.length}\n                        text={ \n                            this.route.length ? \n                            `Found path of length ${this.route.length}.`\n                            : 'Path not found!'\n                        }\n                    />\n                    <Settings\n                        changeSelectedAlgorithm={this.changeAlgorithm}\n                        onClick={this.onRunButtonClick}\n                        onMazeClick={this.generateMazeSimple}\n                        onResetClick={this.clearVisualization}\n                        visualizationState={this.state.visualizationState}\n                        changeVisSpeed={this.changeVisSpeed}\n                        visualizationSpeed={this.state.visualizationSpeed}\n                        activeAlert={this.state.activeAlert}\n                    />\n                </MobileStateProvider>\n                <span \n                    style = {{ \n                        width: '100%', \n                        height: '100%', \n                        display: 'flex' , \n                        flexDirection: 'row' , \n                        topMargin: '100', \n                        position: 'fixed',\n                        padding: '0px 0px'\n                    }}>\n                    <ItemBar\n                        changeSelectedItem={this.changeItem}\n                        selectedItem={this.state.item}\n                        hidden={this.state.visualizationState !== VizState.INACTIVE}\n                        activeAlert={this.state.activeAlert}\n                        removeAlert={this.removeAlert}\n                    />\n                    <Grid\n                        updateCell={this.drawOnGrid}\n                        selectedItem={this.state.item}\n                        grid={this.grid}\n                        disableDrawing={this.state.visualizationState !== VizState.INACTIVE}\n                    />\n                </span>\n            </div>\n        )\n    }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/style.css'\n\nimport App from './components/App'\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n"],"sourceRoot":""}