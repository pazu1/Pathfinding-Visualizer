{"version":3,"sources":["constvar.js","components/Settings.js","components/GridButton.js","components/Grid.js","components/ItemBarBtn.js","components/ItemBar.js","extfunctions.js","components/App.js","index.js"],"names":["CellStyles","background","color","transform","textContent","Alg","CellType","VizState","AlertTypes","Adjacent","Settings","runButtonText","runButtonIcon","this","props","visualizationState","className","name","id","onChange","changeSelectedAlgorithm","disabled","value","min","max","visualizationSpeed","e","changeVisSpeed","target","type","onClick","onMazeClick","onResetClick","style","React","Component","GridButton","useState","setState","updateAnyway","compRef","useRef","cell","ref","onMouseDown","disableDrawing","clickFunction","x","y","onMouseOver","drawing","Grid","state","runningAlgorithm","event","pressed","tableContent","grid","map","row","rowContent","key","updateCell","handleMouse","onMouseLeave","onMouseUp","ItemBarBtn","display","parentHidden","boxShadow","border","trigger","text","position","closeOnDocumentClick","open","showTip","on","onClose","onTipClosed","tipText","ItemBar","expanded","setExpanded","hide","hidden","height","zIndex","paddingLeft","marginBottom","opacity","selectedItem","changeSelectedItem","activeAlert","removeAlert","sleep","ms","Promise","resolve","setTimeout","applyStyle","reference","effect","current","asyncForEach","array","callback","a","index","length","App","start","end","route","algorithm","item","drawOnGrid","bind","changeAlgorithm","changeItem","onRunButtonClick","updateRoute","clearVisualization","createGrid","generateMaze","algFunctions","1","aStarPlus","2","BFS","3","4","DFS","rows","Math","floor","window","innerHeight","cols","innerWidth","newGrid","push","weight","parseInt","reverse","coord","abs","then","itemType","replaceCell","startOrEnd","prevX","prevY","forEach","wallList","random","wall","psgCount","direction","canBeOpened","splice","alg","foundRoute","comparator","b","gScore","queue","Node","dist","distance","adjacencyListD","algGrid","shift","next","d","unshift","currentCell","sort","setRoute","resetAll","c","adjacencyList","console","log","pop","width","flexDirection","topMargin","padding","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe19f15c.chunk.js","sourcesContent":["export const CellStyles = [\n    {\n        background: '#eee',\n        color: '#000',\n        transform: 'scale(1.0)'\n    },\n    {\n        background: '#000',\n        color: '#000',\n        transform: 'scale(1.0)'\n    },\n    {\n        background: '#00ff37',\n        transform: 'scale(1.0)',\n        textContent: 's'\n    },\n    {\n        background: '#a200ff',\n        transform: 'scale(1.0)',\n        textContent: 'e'\n    },\n    {\n        background: '#38ffc7',\n        transform: 'scale(0.2)'\n    },\n    {\n        background: '#f05e54',\n        transform: 'scale(1.0)'\n    },\n    {\n        background: '#38ffc7',\n        transform: 'scale(1.0)'\n    }\n]\n\nexport const Alg = {\n    ASTAR: 1,\n    DIJKSTRA: 2,\n    BFS: 3,\n    DFS: 4\n}\n\nexport const CellType = {\n    NONE: 0,\n    WALL: 1,\n    START: 2,\n    END: 3,\n    VISITED: 4,\n    ROUTE: 5\n}\n\nexport const VizState = {\n    INACTIVE: 0,\n    RUNNING: 1,\n    FINISHED: 2\n}\n\nexport const AlertTypes = {\n    NOSTART: 'Please add a start node.',\n    NOEND: 'Please add an end node.'\n}\n\nexport const Adjacent = [\n    [-1,0],\n    [0,1],\n    [1,0],\n    [0,-1]\n]\n\n","import React from 'react';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport RangeSlider from 'react-bootstrap-range-slider';\n\nimport { Alg, VizState } from '../constvar'\n\nclass Settings extends React.Component { \n\n    render() {\n        let runButtonText = 'Run! '\n        let runButtonIcon = 'play-sharp'\n\n        if (this.props.visualizationState === VizState.RUNNING) { \n            runButtonText = 'Skip visualization'\n            runButtonIcon = 'play-forward-sharp'\n        } else if (this.props.visualizationState === VizState.FINISHED) {\n            runButtonText = 'Clear route'\n            runButtonIcon = 'refresh-sharp'\n        }\n\n        return (\n            <div className='topBar'>\n                <div>\n                    <label>Algorithm: </label>\n                    <select \n                        name='algorithms' \n                        id='algorithms'\n                        onChange={this.props.changeSelectedAlgorithm}\n                        disabled={this.props.visualizationState !== VizState.INACTIVE}\n                    >\n                         <option value={Alg.ASTAR}>A*</option>\n                         <option value={Alg.DIJKSTRA}>Dijkstra</option>\n                         <option value={Alg.BFS}>BFS</option>\n                         <option value={Alg.DFS}>DFS</option>\n                    </select>\n                </div>\n\n                <div className='sliderContainer'>\n                    <label>Visualization speed:</label>\n                    <RangeSlider\n                        min={10}\n                        max={100}\n                        value={this.props.visualizationSpeed}\n                        onChange={(e) => this.props.changeVisSpeed(e.target.value)}\n                    />\n                </div>\n\n                <button \n                    type='button' \n                    className='settingsButton'\n                    disabled={this.props.visualizationState === VizState.RUNNING }\n                    onClick={() => this.props.onMazeClick()}\n                >\n                    Generate maze \n                </button>\n\n                <button \n                    type='button' \n                    className='resetButton'\n                    disabled={this.props.visualizationState === VizState.RUNNING }\n                    onClick={() => this.props.onResetClick(true)}\n                >\n                    <ion-icon name='trash-sharp'></ion-icon>\n                    Reset grid\n                </button>\n\n                <button \n                    style={this.props.visualizationState !== VizState.INACTIVE ? { background: '#eee' } : null}\n                    type='button' \n                    className='settingsButton'\n                    onClick={this.props.onClick}\n                >\n                    <ion-icon name={ runButtonIcon }\n                    ></ion-icon>\n                    {runButtonText}\n                </button>\n\n            </div>\n        )\n    }\n}\n\nexport default Settings\n","import React, { useState, useRef } from 'react'\n\nfunction GridButton (props) { \n\n    const [, setState] = useState()\n\n    const updateAnyway = () => {\n        setState({})\n    }\n\n    const compRef = useRef()\n    props.cell.ref = compRef\n\n    return(\n        <button \n            ref={compRef}\n            type='button' \n            className='gridButton'\n\n            onMouseDown = {() => {\n                if (!props.disableDrawing) {\n                    props.clickFunction(props.x, props.y)\n                    updateAnyway()\n                }\n                \n            }}\n            onMouseOver = {() => {\n                if (props.drawing && !props.disableDrawing) {\n                    props.clickFunction(props.x, props.y)\n                    updateAnyway()\n                }\n            }}\n        >‎\n        </button>\n    )\n}\n\nexport default GridButton\n","import React from 'react';\n\nimport GridButton from './GridButton'\n\nclass Grid extends React.Component {\n\n    constructor() {\n        super()\n\n        this.state = {\n            drawing: false,\n            runningAlgorithm: false\n        }\n\n    }\n\n    handleMouse(event, pressed) {\n        this.setState({ drawing: pressed })\n    }\n\n    render() {\n\n        let y = -1\n        let tableContent = this.props.grid.map(row => { \n            let x = -1\n            y++\n            let rowContent = row.map(cell => {\n                x++\n                return(\n                    <td key={x}>\n                        <GridButton \n                            cell={this.props.grid[y][x]}\n                            x={x}\n                            y={y}\n                            clickFunction={this.props.updateCell}\n                            drawing={this.state.drawing}\n                            disableDrawing={this.props.disableDrawing}\n                        />\n                    </td>\n                )\n            })\n            return (\n                <tr key={y}>\n                    {rowContent}\n                </tr>\n            )\n        })\n\n        return (\n            <table \n                className='gridBase' \n                onMouseDown={(e) => {this.handleMouse(e, true)}}\n                onMouseLeave={(e) => this.handleMouse(e, false)}\n                onMouseUp={(e) => this.handleMouse(e, false)}\n            >\n                <tbody>\n                    {tableContent}\n                </tbody>\n            </table>\n        )\n    }\n}\n\nexport default Grid\n","import React from 'react'\nimport Popup from 'reactjs-popup'\n\nfunction ItemBarBtn(props) {\n    \n    let style = { display: 'table-row'}\n    if (props.parentHidden) {\n        style.display = 'none'\n    }\n    if (props.disabled) {\n        style.boxShadow = 'none'\n        style.border = '2px solid transparent'\n    }\n\n\n    return (\n        <Popup trigger={\n            <button\n                className='itemBarBtn'\n                style={ style }\n                onClick={ props.onClick }\n            >\n                <span\n                    style={{ color: props.color }}\n                >\n                    { '■ ' }\n                </span>\n                { props.text ?<p id='itemBarText'>{props.text}</p> : 'item' }\n            </button>\n            }\n            position='right center'\n            closeOnDocumentClick\n            open={props.showTip}\n            on='none'\n            onClose={props.onTipClosed}\n        >\n            {props.tipText}\n        </Popup>\n    )\n}\n\nexport default ItemBarBtn\n","import React, { useState } from 'react';\n\nimport ItemBarBtn from './ItemBarBtn'\nimport { CellType, AlertTypes } from '../constvar'\n\nfunction ItemBar(props) {\n    const [expanded, setExpanded] = useState(true) \n    let hide = !expanded || props.hidden\n\n    return (\n        <div style={ { height: '100%', zIndex:10} }>\n            <button \n                className = 'itemBarToggle'\n                onClick={() => {\n                    if (!props.hidden) setExpanded(!expanded)\n                }}>\n                Items\n                <ion-icon \n                    name={ hide ? 'caret-down-outline' : \n                            'caret-up-outline' }\n                    style={ { \n                        paddingLeft: 20,\n                        marginBottom: -4\n                    } }\n                >\n                </ion-icon>\n            </button>\n            <div \n                className = 'itemBar'\n                style={ \n                    !hide ? { \n                        height: '20vh', \n                        opacity: 100} \n                    : { \n                        height: '0%', \n                        opacity: 0\n                }}\n                    >\n                <ItemBarBtn \n                    parentHidden={!expanded}\n                    text={'Start node'}\n                    color={'#00ff37'}\n                    disabled={ props.selectedItem !== CellType.START }\n                    onClick={() => {props.changeSelectedItem(CellType.START)}}\n                    showTip={props.activeAlert === AlertTypes.NOSTART}\n                    tipText={props.activeAlert} \n                    onTipClosed={props.removeAlert}\n\n                />\n                <ItemBarBtn \n                    parentHidden={!expanded}\n                    text={'End node'}\n                    color={'#a200ff'}\n                    disabled={ props.selectedItem !== CellType.END }\n                    onClick={() => {props.changeSelectedItem(CellType.END)}}\n                    showTip={props.activeAlert === AlertTypes.NOEND}\n                    tipText={props.activeAlert} \n                    onTipClosed={props.removeAlert}\n\n                />\n                <ItemBarBtn \n                    parentHidden={!expanded}\n                    text={'Wall'}\n                    color={'#000'}\n                    disabled={ props.selectedItem !== CellType.WALL }\n                    onClick={() => props.changeSelectedItem(CellType.WALL)}\n\n                />\n                <ItemBarBtn \n                    parentHidden={!expanded}\n                    text={'Eraser'}\n                    color={'#fff'}\n                    disabled={ props.selectedItem !== CellType.NONE }\n                    onClick={() => props.changeSelectedItem(CellType.NONE)}\n\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default ItemBar\n","export function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\nexport function applyStyle(style, reference, effect = null) {\n    reference.current.style.background = style.background\n    reference.current.style.transform = style.transform\n    if (effect) {\n        effect(reference)\n    }\n}\n\nexport async function asyncForEach(array, callback) {\n    for (let index = 0; index < array.length; index++) {\n        await callback(array[index], index, array)\n    }\n}\n","import React from 'react'\n\nimport Settings from './Settings'\nimport Grid from './Grid'\nimport ItemBar from './ItemBar'\nimport { Alg, CellType, CellStyles, VizState, AlertTypes, Adjacent } from '../constvar'\nimport { sleep, asyncForEach, applyStyle } from '../extfunctions'\n\nconst CELLSIZE = 20\n\nclass App extends React.Component {\n\n    constructor() {\n        super()\n\n        this.grid = []\n        this.start = null\n        this.end = null\n        this.route = []\n\n        this.state = {\n            algorithm: Alg.ASTAR,\n            item: CellType.START,\n            activeAlert: null,\n            visualizationState: VizState.INACTIVE,\n            visualizationSpeed: 90\n        }\n\n        this.drawOnGrid = this.drawOnGrid.bind(this)\n        this.changeAlgorithm = this.changeAlgorithm.bind(this)\n        this.changeItem = this.changeItem.bind(this)\n        this.onRunButtonClick = this.onRunButtonClick.bind(this)\n        this.updateRoute = this.updateRoute.bind(this)\n        this.clearVisualization = this.clearVisualization.bind(this)\n        this.removeAlert = this.removeAlert.bind(this)\n        this.changeVisSpeed = this.changeVisSpeed.bind(this)\n        this.createGrid = this.createGrid.bind(this)\n        this.generateMaze = this.generateMaze.bind(this)\n\n        this.algFunctions = {\n            1: this.aStarPlus.bind(this),\n            2: this.BFS.bind(this),\n            3: this.BFS.bind(this),\n            4: this.DFS.bind(this)\n        }\n    }\n\n    componentDidMount() {\n        this.createGrid()\n    }\n\n    createGrid() {\n        let rows = Math.floor((window.innerHeight*0.7) / CELLSIZE)\n        let cols = Math.floor((window.innerWidth*0.65) / CELLSIZE)\n        let newGrid = []\n        for (let y=0;y<rows;y++) {\n            newGrid.push([])\n            for (let x=0;x<cols;x++) {\n                newGrid[y].push({\n                    type: CellType.NONE,\n                    weight: 0, // TODO\n                    x: x,\n                    y: y,\n                    ref: null\n                })\n            }\n        }\n        this.grid = newGrid\n        this.setState({})\n    }\n\n    changeItem(selectedItem) {\n        this.setState({item: selectedItem})\n    }\n\n    changeAlgorithm(event) {\n        this.setState({algorithm: parseInt(event.target.value)})\n    }\n\n    removeAlert() {\n        this.setState({activeAlert: null})\n    }\n\n    changeVisSpeed(value) {\n        this.setState({ visualizationSpeed: value })\n    }\n\n    onRunButtonClick() { \n        let start = this.start\n        let end = this.end\n        if (start === null) {\n            this.setState({activeAlert: AlertTypes.NOSTART})\n            return\n        } else if (end === null) {\n            this.setState({activeAlert: AlertTypes.NOEND})\n            return\n        }\n\n        if (this.state.visualizationState === VizState.RUNNING) {\n            this.setState({\n                visualizationState: VizState.FINISHED\n            })\n        } else if (this.state.visualizationState === VizState.FINISHED) {\n            this.clearVisualization()\n        } else {\n            this.setState({\n                start: start,\n                end: end,\n                visualizationState: VizState.RUNNING},\n                () => this.algFunctions[this.state.algorithm](this.grid[start.y][start.x],\n                    this.grid[end.y][end.x])\n            )\n        }\n    }\n\n    async updateRoute() { // make part of visualization TODO\n        this.route.reverse()\n        asyncForEach(this.route, async (coord) => {\n            if (this.state.visualizationState === VizState.RUNNING)\n                await sleep(Math.abs(this.state.visualizationSpeed-110)) \n            this.grid[coord.y][coord.x].type = CellType.ROUTE\n            applyStyle(CellStyles[CellType.ROUTE], this.grid[coord.y][coord.x].ref)\n\n        }).then(() => {\n\n            this.setState({visualizationState: VizState.FINISHED})\n        })\n    }\n\n    drawOnGrid(x, y, itemType = this.state.item) { \n\n        const replaceCell = (startOrEnd) => {\n                let prevX = startOrEnd.x\n                let prevY = startOrEnd.y\n                this.grid[prevY][prevX].type = CellType.NONE\n                applyStyle(CellStyles[CellType.NONE], this.grid[prevY][prevX].ref)\n        }\n\n        // Delete end- / start-nodes if they were drawn on\n        if (this.end && this.end.x === x && this.end.y === y ) {\n            replaceCell(this.end)\n            this.end = null \n        } else if (this.start && this.start.x === x && this.start.y === y ) {\n            replaceCell(this.start)\n            this.start = null\n        }\n        \n        // Special case: drawing end- or start-nodes\n        if (itemType ===  CellType.START) { \n            if (this.start) {\n                replaceCell(this.start)\n            }\n            this.start = {x: x, y: y}\n        } else if (itemType ===  CellType.END) { \n            if (this.end) {\n                replaceCell(this.end)\n            }\n            this.end = {x: x, y: y}\n        } \n\n        this.grid[y][x].type = itemType\n        applyStyle(CellStyles[itemType], this.grid[y][x].ref)\n    }\n\n    generateMaze() { // Prim's Algorithm\n        this.clearVisualization()\n        this.grid.forEach(row => {\n            row.forEach(cell => {\n                cell.type = CellType.WALL\n            })\n        })\n\n        let wallList = [this.grid[1][1]]\n\n        const canBeOpened = (cell) => {\n            let psgCount = 0\n            if (!cell) return false\n            Adjacent.forEach(direction => {\n                let x = cell.x+direction[0]\n                let y = cell.y+direction[1]\n                if (!this.grid[y] || !this.grid[y][x]) return\n                if (this.grid[y][x].type === CellType.NONE) psgCount += 1\n            })\n            return ( psgCount <= 1 )\n        }\n\n        while (wallList.length) {\n            let index = Math.floor(Math.random() * wallList.length)\n            let wall =  wallList[index]\n            if (canBeOpened(wall)) {\n                wall.type = CellType.NONE\n                Adjacent.forEach((direction) => {\n                    let x = wall.x+direction[0]\n                    let y = wall.y+direction[1]\n                    if (!this.grid[y] || !this.grid[y][x]) return\n                    wallList.push(this.grid[y][x])\n                })\n            }\n            wallList.splice(index,1)\n        }\n        \n        // draw results\n        this.grid.forEach(row => {\n            row.forEach(cell => {\n                this.drawOnGrid(cell.x, cell.y, cell.type)\n            })\n        })\n\n    }\n\n    async aStarPlus(start, end, alg = Alg.ASTAR) { \n\n        // initialize\n        let foundRoute = false\n        class Node {\n          constructor(x, y, dist, gScore) {\n            this.x = x\n            this.y = y\n            this.distance = dist\n            this.gScore = gScore\n          }\n        }\n        const comparator = (a,b) => { \n            return a.gScore > b.gScore ? 1 : -1\n        }\n\n        let queue = [] \n        queue.push(new Node(start.x,start.y,0,0))\n        let adjacencyListD = { \n            [start.x+':'+start.y]: null\n        }\n        let algGrid = this.grid\n\n        // perform search\n        while (queue.length) {\n            let current = queue.shift()\n\n            if (current.x === end.x && current.y === end.y) { // found\n                foundRoute = true\n                break\n            }\n\n            Adjacent.forEach((direction) => {\n                let x = current.x+direction[0]\n                let y = current.y+direction[1]\n                if (!algGrid[y]) return\n                if (!algGrid[y][x]) return\n                let next = algGrid[y][x]\n                if (next.type === CellType.WALL ||\n                   (next.x === start.x && next.y === start.y)) return\n\n                if (!adjacencyListD[x+':'+y]) { // Not yet discovered\n                    adjacencyListD[x+':'+y] = {\n                        x: current.x, \n                        y: current.y,\n                        d: 9999\n                    }\n                }\n\n                let distance = current.distance+1  \n                const multiplier = 1.0\n                let gScore = distance + multiplier*(Math.abs(end.x - x) + Math.abs(end.y - y))\n\n                if (distance < adjacencyListD[x+':'+y].d) { // Found a shorter path\n                    adjacencyListD[x+':'+y] = {\n                        x: current.x, \n                        y: current.y,\n                        d: distance\n                    }\n                    if (alg !== Alg.DFS) {\n                        queue.push(new Node(x, y, distance,gScore))\n                    }\n                    else {\n                        queue.unshift(new Node(x, y, distance,gScore))\n                    }\n                }\n            })\n            let currentCell = algGrid[current.y][current.x]\n\n            if (currentCell.type !== CellType.START && currentCell.type !== CellType.VISITED) { // Mark current as visited\n                currentCell.type = CellType.VISITED \n                if ( this.state.visualizationState === VizState.RUNNING ) { // Running -> run animation\n                    await sleep(Math.abs(this.state.visualizationSpeed-110)) \n                    applyStyle(CellStyles[CellType.VISITED], currentCell.ref, (ref) => {\n                        sleep(400).then(() => {\n                            ref.current.style.transform = 'scale(1.0)'\n                        })\n                    })\n                } else {\n                    applyStyle(CellStyles[6], currentCell.ref) \n                }\n            }\n\n            if (alg === Alg.ASTAR ) {\n                queue.sort(comparator)\n            }\n        }\n\n        // draw results\n        if (foundRoute) {\n            this.setRoute(adjacencyListD,end) \n        }\n        if (this.state.visualizationState === VizState.RUNNING) {\n            await sleep(100)\n        }\n        this.updateRoute()\n    }\n\n    async DFS(start, end) {\n        this.aStarPlus(start, end, Alg.DFS)\n    }\n        \n    async BFS(start, end) {\n        this.aStarPlus(start, end, Alg.BFS)\n    }\n\n    clearVisualization(resetAll = false) {\n        this.route = []\n\n        this.setState(() => {\n            this.grid.map((row) => {\n                row = row.map((c) => {\n                    if (this.start && c.x === this.start.x && c.y === this.start.y) \n                        c.type = CellType.START\n                    else if (this.end && c.x === this.end.x && c.y === this.end.y) \n                        c.type = CellType.END\n                    else if (resetAll ||\n                    c.type === CellType.VISITED ||\n                    c.type === CellType.ROUTE) {\n                        applyStyle(CellStyles[CellType.NONE], c.ref)\n                        c.type = CellType.NONE\n                    }\n                    return c\n                })\n                return row\n            })\n            return { visualizationState: VizState.INACTIVE }\n        })\n        if (resetAll) {\n            this.start = null\n            this.end = null\n        }\n            \n    }\n\n    setRoute(adjacencyList, end) {\n        this.route.push({\n            x: end.x, \n            y: end.y\n        })\n        \n        let index = end.x+':'+end.y\n        while (adjacencyList[index] !== null) {\n            this.route.push(adjacencyList[index])\n            index = adjacencyList[index].x+':'+adjacencyList[index].y\n        }\n        console.log('Route length: '+this.route.length)\n        this.route.shift() // remove start\n        this.route.pop() // and end\n    }\n\n    render() {\n        return (\n            <div>\n                <Settings\n                    changeSelectedAlgorithm={this.changeAlgorithm}\n                    onClick={this.onRunButtonClick}\n                    onMazeClick={this.generateMaze}\n                    onResetClick={this.clearVisualization}\n                    visualizationState={this.state.visualizationState}\n                    changeVisSpeed={this.changeVisSpeed}\n                    visualizationSpeed={this.state.visualizationSpeed}\n                    activeAlert={this.state.activeAlert}\n                />\n                <span \n                    style = {{ \n                        width: '100%', \n                        height: '100%', \n                        display: 'flex' , \n                        flexDirection: 'row' , \n                        topMargin: '100', \n                        position: 'fixed',\n                        padding: '0px 0px'\n                    }}>\n                    <ItemBar\n                        changeSelectedItem={this.changeItem}\n                        selectedItem={this.state.item}\n                        hidden={this.state.visualizationState !== VizState.INACTIVE}\n                        activeAlert={this.state.activeAlert}\n                        removeAlert={this.removeAlert}\n                    />\n                    <Grid\n                        updateCell={this.drawOnGrid}\n                        selectedItem={this.state.item}\n                        grid={this.grid}\n                        disableDrawing={this.state.visualizationState !== VizState.INACTIVE}\n                    />\n                </span>\n            </div>\n        )\n    }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/style.css'\n\nimport App from './components/App'\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n"],"sourceRoot":""}