{"version":3,"sources":["components/MobileContext.js","constvar.js","components/TopBar.js","components/Settings.js","components/GridButton.js","components/Grid.js","components/ItemBarBtn.js","components/ItemBar.js","components/Notification.js","extfunctions.js","components/App.js","index.js"],"names":["MobileContext","React","createContext","MobileStateProvider","props","setMobile","newMobile","setState","mobile","state","onResize","bind","window","requestAnimationFrame","width","innerWidth","this","addEventListener","removeEventListener","Provider","value","children","Component","CellStyles","background","color","transform","Alg","CellType","VizState","AlertTypes","Adjacent","TopBar","hide","sProps","useSpring","height","opacity","config","key","wobbly","stiff","aStyle","div","className","style","display","name","id","onChange","changeSelectedAlgorithm","disabled","visualizationState","min","max","visualizationSpeed","e","changeVisSpeed","target","type","onClick","onMazeClick","onResetClick","fontSize","runButtonIcon","runButtonText","Settings","expanded","context","dropDownIcon","prevState","textShadow","contextType","GridButton","useState","updateAnyway","compRef","useRef","cell","ref","onMouseDown","disableDrawing","clickFunction","x","y","onMouseOver","drawing","Grid","runningAlgorithm","event","pressed","tableContent","grid","map","row","rowContent","updateCell","handleMouse","onMouseLeave","onMouseUp","ItemBarBtn","boxShadow","border","trigger","text","position","closeOnDocumentClick","open","showTip","on","onClose","onTipClosed","tipText","ItemBar","setExpanded","hidden","selectedItem","changeSelectedItem","activeAlert","removeAlert","Notification","margin","useContext","active","bottom","prevWasAlert","useEffect","current","usePrevious","isAlert","sleep","ms","Promise","resolve","setTimeout","applyStyle","reference","effect","asyncForEach","array","callback","a","index","length","App","start","end","route","algorithm","item","drawOnGrid","changeAlgorithm","changeItem","onRunButtonClick","updateRoute","clearVisualization","createGrid","generateMazeSimple","algFunctions","1","aStarPlus","2","BFS","3","DFS","rows","Math","floor","innerHeight","cols","newGrid","push","parseInt","reverse","coord","abs","then","itemType","replaceCell","startOrEnd","prevX","prevY","forEach","wallList","random","wall","psgCount","direction","canBeOpened","splice","alg","foundRoute","comparator","b","gScore","queue","Node","dist","distance","adjacencyListD","algGrid","shift","next","d","unshift","currentCell","sort","setRoute","resetAll","c","adjacencyList","console","log","pop","flexDirection","topMargin","padding","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a4e711f.chunk.js","sourcesContent":["import React from 'react'\n\nconst MobileContext = React.createContext()\n\nconst MOBILE_WIDTH = 800\n\nclass MobileStateProvider extends React.Component {\n\n    constructor(props) {\n        super()\n        this.state = {\n            mobile: false\n        }\n        this.onResize = this.onResize.bind(this)\n    }\n\n    onResize() {\n        window.requestAnimationFrame(() => {\n            this.setState(() => {\n                let width = window.innerWidth\n                let mobile =  (width < MOBILE_WIDTH)\n\n                return { \n                    width: width,\n                    mobile: mobile\n                }\n            })\n        })\n    }\n\n    componentWillMount() {\n        this.setState({\n            width: window.innerWidth,\n            mobile: window.innerWidth < MOBILE_WIDTH\n        })\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.onResize)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.onResize)\n    }\n    \n\n    setMobile = (newMobile) => {\n        this.setState({ mobile: newMobile })\n    }\n\n    render() {\n        const { mobile } = this.state\n        const { setMobile } = this\n\n        return ( \n            <MobileContext.Provider \n                value={{\n                    mobile,\n                    setMobile\n                }}\n            >\n                {this.props.children}\n            </MobileContext.Provider>\n        )\n    }\n}\n\nexport default MobileContext\n\nexport { MobileStateProvider }\n    \n","export const CellStyles = [\n    {\n        background: '#eee',\n        color: '#000',\n        transform: 'scale(1.0)'\n    },\n    {\n        background: '#000',\n        color: '#000',\n        transform: 'scale(1.0)'\n    },\n    {\n        background: '#36bf00',\n        transform: 'scale(0.7)'\n    },\n    {\n        background: '#a200ff',\n        transform: 'scale(0.7)',\n    },\n    {\n        background: '#38ffc7',\n        transform: 'scale(0.2)'\n    },\n    {\n        background: '#f05e54',\n        transform: 'scale(1.0)'\n    },\n    {\n        background: '#38ffc7',\n        transform: 'scale(1.0)'\n    }\n]\n\nexport const Alg = {\n    ASTAR: 1,\n    BFS: 2,\n    DFS: 3\n}\n\nexport const CellType = {\n    NONE: 0,\n    WALL: 1,\n    START: 2,\n    END: 3,\n    VISITED: 4,\n    ROUTE: 5\n}\n\nexport const VizState = {\n    INACTIVE: 0,\n    RUNNING: 1,\n    FINISHED: 2\n}\n\nexport const AlertTypes = {\n    NOSTART: 'Please add a start node.',\n    NOEND: 'Please add an end node.'\n}\n\nexport const Adjacent = [\n    [-1,0],\n    [0,1],\n    [1,0],\n    [0,-1]\n]\n\n","import React from 'react'\nimport RangeSlider from 'react-bootstrap-range-slider';\nimport MdTrash from 'react-ionicons/lib/MdTrash'\nimport { useSpring, animated, config } from 'react-spring'\n\nimport { VizState, Alg } from '../constvar'\n\nfunction TopBar(props) {\n\n    const { mobile, hide } = props\n\n    const sProps = useSpring({\n        height: !hide ? 220 : 0,\n        opacity: !hide ? 1 : 0,\n        config: key => (key === 'height' ? config.wobbly : config.stiff)\n    })\n   \n    const aStyle = {\n        height: sProps.height,\n        opacity: sProps.opacity\n    }\n\n    return (\n        <animated.div \n            className = { mobile ? 'topBarMobile' : 'topBar' } \n            style = {\n                mobile ? aStyle : null\n            }\n        >\n            <div\n                style={ mobile ? { display: 'none' } : null }\n            >\n                <label>Algorithm: </label>\n                <select \n                    name='algorithms' \n                    id='algorithms'\n                    onChange={props.changeSelectedAlgorithm}\n                    disabled={props.visualizationState !== VizState.INACTIVE}\n                >\n                     <option value={Alg.ASTAR}>A*</option>\n                     <option value={Alg.BFS}>BFS</option>\n                     <option value={Alg.DFS}>DFS</option>\n                </select>\n            </div>\n            <br/>\n\n            <div className='sliderContainer'>\n                <label>Visualization speed:</label>\n                <RangeSlider\n                    min={10}\n                    max={100}\n                    value={props.visualizationSpeed}\n                    onChange={(e) => props.changeVisSpeed(e.target.value)}\n                />\n            </div>\n            <br/>\n\n            <button \n                type='button' \n                className='settingsButton'\n                disabled={props.visualizationState === VizState.RUNNING }\n                onClick={() => props.onMazeClick()}\n            >\n                Generate maze \n            </button>\n            <br/>\n\n            <button \n                type='button' \n                className='resetButton'\n                disabled={props.visualizationState === VizState.RUNNING }\n                onClick={() => props.onResetClick(true)}\n            >\n                <MdTrash \n                    fontSize='17px' \n                    className='ionIcon' \n                    color={props.visualizationState === VizState.RUNNING ? '#666' : null}\n                />\n                Reset grid\n            </button>\n            <br/>\n\n            <button \n                style={ mobile ? { display: 'none' } : null }\n                type='button' \n                className='settingsButton'\n                onClick={props.onClick}\n            >\n                {props.runButtonIcon}\n                {props.runButtonText}\n            </button>\n        </animated.div>\n    )\n\n}\n\nexport default TopBar\n","import React from 'react';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport MdArrowDropdown from 'react-ionicons/lib/MdArrowDropdown'\nimport MdArrowDropup from 'react-ionicons/lib/MdArrowDropup'\nimport MdFastForward from 'react-ionicons/lib/MdFastforward'\nimport MdRefresh from 'react-ionicons/lib/MdRefresh'\nimport MdPlay from 'react-ionicons/lib/MdPlay'\n\nimport MobileContext from './MobileContext'\nimport TopBar from './TopBar'\nimport { Alg, VizState } from '../constvar'\n\n\nclass Settings extends React.Component { \n\n    static contextType = MobileContext\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            expanded: true\n        }\n    }\n        \n    render() {\n\n        const { mobile } = this.context\n\n        let runButtonText = 'Run! '\n        let runButtonIcon = <MdPlay fontSize='17px' className='ionIcon'/>\n\n        if (this.props.visualizationState === VizState.RUNNING) { \n            runButtonText = 'Skip visualization'\n            runButtonIcon = <MdFastForward fontSize='17px' className='ionIcon'/>\n        } else if (this.props.visualizationState === VizState.FINISHED) {\n            runButtonText = 'Clear path'\n            runButtonIcon = <MdRefresh fontSize='17px' className='ionIcon'/>\n        } \n\n        let dropDownIcon = <MdArrowDropup fontSize='25px' className='ionDropdown'/>\n        if (!this.state.expanded) {\n            dropDownIcon = <MdArrowDropdown fontSize='25px' className='ionDropdown'/>\n        }\n\n        return (\n            <div\n                className = { mobile ? 'topBarContainer' : null }\n            >\n                <button \n                    className = 'topBarToggle' \n                    style = { !mobile ? { display: 'none' } : null }\n                    onClick = {\n                        () => this.setState((prevState) => {\n                            return {expanded: !prevState.expanded }\n                        })\n                    }\n                >\n                    Options\n                    { dropDownIcon }\n                </button>\n\n                <TopBar\n                    hide={!this.state.expanded}\n                    mobile={mobile}\n                    changeSelectedAlgorithm={this.props.changeSelectedAlgorithm}\n                    visualizationState={this.props.visualizationState}\n                    onClick={this.props.onClick}\n                    changeVisSpeed={this.props.changeVisSpeed}\n                    visualizationSpeed={this.props.visualizationSpeed}\n                    runButtonText={ runButtonText }\n                    runButtonIcon={ runButtonIcon }\n                    onMazeClick={this.props.onMazeClick}\n                    onResetClick={this.props.onResetClick}\n                />\n                <div\n                    className='mobileActionBar'\n                    style={ !mobile ? { display: 'none' } : null }\n                >\n                    <div \n                    >\n                        <label\n                            style={{textShadow: '2px 2px 8px #000000'}}\n                        >Algorithm: </label>\n                        <select \n                            name='algorithms' \n                            id='algorithms'\n                            onChange={this.props.changeSelectedAlgorithm}\n                            disabled={this.props.visualizationState !== VizState.INACTIVE}\n                        >\n                             <option value={Alg.ASTAR}>A*</option>\n                             <option value={Alg.BFS}>BFS</option>\n                             <option value={Alg.DFS}>DFS</option>\n                        </select>\n                    </div>\n                    <button \n                        className='settingsButton'\n                        style={ !mobile ? { display: 'none' } : null }\n                        type='button' \n                        onClick={this.props.onClick}\n                    >\n                        {runButtonIcon}\n                        {runButtonText}\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Settings\n","import React, { useState, useRef } from 'react'\n\nfunction GridButton (props) { \n\n    const [, setState] = useState()\n\n    const updateAnyway = () => {\n        setState({})\n    }\n\n    const compRef = useRef()\n    props.cell.ref = compRef\n\n    return(\n        <button \n            ref={compRef}\n            type='button' \n            className='gridButton'\n\n            onMouseDown = {() => {\n                if (!props.disableDrawing) {\n                    props.clickFunction(props.x, props.y)\n                    updateAnyway()\n                }\n                \n            }}\n            onMouseOver = {() => {\n                if (props.drawing && !props.disableDrawing) {\n                    props.clickFunction(props.x, props.y)\n                    updateAnyway()\n                }\n            }}\n        >‎\n        </button>\n    )\n}\n\nexport default GridButton\n","import React from 'react';\n\nimport GridButton from './GridButton'\n\nclass Grid extends React.Component {\n\n    constructor() {\n        super()\n\n        this.state = {\n            drawing: false,\n            runningAlgorithm: false\n        }\n\n    }\n\n    handleMouse(event, pressed) {\n        this.setState({ drawing: pressed })\n    }\n\n    render() {\n\n        let y = -1\n        let tableContent = this.props.grid.map(row => { \n            let x = -1\n            y++\n            let rowContent = row.map(cell => {\n                x++\n                return(\n                    <td key={x}>\n                        <GridButton \n                            cell={this.props.grid[y][x]}\n                            x={x}\n                            y={y}\n                            clickFunction={this.props.updateCell}\n                            drawing={this.state.drawing}\n                            disableDrawing={this.props.disableDrawing}\n                        />\n                    </td>\n                )\n            })\n            return (\n                <tr key={y}>\n                    {rowContent}\n                </tr>\n            )\n        })\n\n        return (\n            <table \n                className='gridBase' \n                onMouseDown={(e) => {this.handleMouse(e, true)}}\n                onMouseLeave={(e) => this.handleMouse(e, false)}\n                onMouseUp={(e) => this.handleMouse(e, false)}\n            >\n                <tbody>\n                    {tableContent}\n                </tbody>\n            </table>\n        )\n    }\n}\n\nexport default Grid\n","import React from 'react'\nimport Popup from 'reactjs-popup'\n\nfunction ItemBarBtn(props) {\n    \n    let style = { display: 'table-row'}\n    if (props.disabled) {\n        style.boxShadow = 'none'\n        style.border = '2px solid transparent'\n    }\n\n\n    return (\n        <Popup trigger={\n            <button\n                className='itemBarBtn'\n                style={ style }\n                onClick={ props.onClick }\n            >\n                <span\n                    style={{ color: props.color }}\n                >\n                    { '■ ' }\n                </span>\n                { props.text ?<p id='itemBarText'>{props.text}</p> : 'item' }\n            </button>\n            }\n            position='right center'\n            closeOnDocumentClick\n            open={props.showTip}\n            on='none'\n            onClose={props.onTipClosed}\n        >\n            {props.tipText}\n        </Popup>\n    )\n}\n\nexport default ItemBarBtn\n","import React, { useState } from 'react'\n\nimport ItemBarBtn from './ItemBarBtn'\nimport { CellType, AlertTypes } from '../constvar'\nimport MdArrowDropdown from 'react-ionicons/lib/MdArrowDropdown'\nimport MdArrowDropup from 'react-ionicons/lib/MdArrowDropup'\nimport { useSpring, animated, config } from 'react-spring'\n\nfunction ItemBar(props) {\n    const [expanded, setExpanded] = useState(true) \n    let hide = !expanded || props.hidden\n    let dropDownIcon = <MdArrowDropup fontSize='25px' className='ionDropdown'/>\n    if (hide) {\n        dropDownIcon = <MdArrowDropdown fontSize='25px' className='ionDropdown'/>\n    }\n\n    const sProps = useSpring({\n        height: !hide ? 330 : 0,\n        opacity: !hide ? 1 : 0,\n        config: key => (key === 'height' ? config.wobbly : config.stiff)\n    })\n    \n    const aStyle = {\n        height: sProps.height,\n        opacity: sProps.opacity\n    }\n\n    return (\n        <div className='itemBarContainer'>\n            <button \n                className = 'itemBarToggle'\n                onClick={() => {\n                    if (!props.hidden) setExpanded(!expanded)\n                }}>\n                    Items\n                    { dropDownIcon }\n            </button>\n            <animated.div \n                className = 'itemBar'\n                style={aStyle}\n                    >\n                <ItemBarBtn \n                    text={'Start node'}\n                    color={'#36bf00'}\n                    disabled={ props.selectedItem !== CellType.START }\n                    onClick={() => {props.changeSelectedItem(CellType.START)}}\n                    showTip={props.activeAlert === AlertTypes.NOSTART}\n                    tipText={props.activeAlert} \n                    onTipClosed={props.removeAlert}\n\n                />\n                <ItemBarBtn \n                    text={'End node'}\n                    color={'#a200ff'}\n                    disabled={ props.selectedItem !== CellType.END }\n                    onClick={() => {props.changeSelectedItem(CellType.END)}}\n                    showTip={props.activeAlert === AlertTypes.NOEND}\n                    tipText={props.activeAlert} \n                    onTipClosed={props.removeAlert}\n\n                />\n                <ItemBarBtn \n                    text={'Wall'}\n                    color={'#000'}\n                    disabled={ props.selectedItem !== CellType.WALL }\n                    onClick={() => props.changeSelectedItem(CellType.WALL)}\n\n                />\n                <ItemBarBtn \n                    text={'Eraser'}\n                    color={'#fff'}\n                    disabled={ props.selectedItem !== CellType.NONE }\n                    onClick={() => props.changeSelectedItem(CellType.NONE)}\n\n                />\n            </animated.div>\n        </div>\n    )\n}\n\nexport default ItemBar\n","import React, {useEffect, useRef, useContext} from 'react'\nimport {useSpring, animated} from 'react-spring'\nimport MobileContext from './MobileContext'\n\nconst ALERTCOLOR = '#f05e54'\nconst DESKTOPMARGIN = 30\nconst MOBILEMARGIN = 90\n\nfunction usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}\n\nfunction Notification (props) { \n\n    const { mobile } = useContext(MobileContext)\n    let margin = DESKTOPMARGIN\n    if (mobile) margin = MOBILEMARGIN\n\n    const sProps = useSpring({\n        height: props.active ? 50 : 0,\n        opacity: props.active ? 1 : 0,\n        bottom: props.active ? margin : 0,\n    })\n\n    const prevWasAlert = usePrevious(props.isAlert)\n\n    const style = {\n        height: sProps.height,\n        opacity: sProps.opacity,\n        background: props.isAlert && prevWasAlert ? ALERTCOLOR : null,\n        bottom: sProps.bottom\n    }\n\n    return (\n        <animated.div \n            className='notification'\n            style={style}>\n            <p>{props.active ? props.text : null}</p>\n        </animated.div>\n    )\n}\n\nexport default Notification\n","export function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\nexport function applyStyle(style, reference, effect = null) {\n    reference.current.style.background = style.background\n    reference.current.style.transform = style.transform\n    if (effect) {\n        effect(reference)\n    }\n}\n\nexport async function asyncForEach(array, callback) {\n    for (let index = 0; index < array.length; index++) {\n        await callback(array[index], index, array)\n    }\n}\n","import React from 'react'\n\nimport Settings from './Settings'\nimport Grid from './Grid'\nimport ItemBar from './ItemBar'\nimport Notification from './Notification'\nimport { Alg, CellType, CellStyles, VizState, AlertTypes, Adjacent } from '../constvar'\nimport { sleep, asyncForEach, applyStyle } from '../extfunctions'\nimport { MobileStateProvider } from './MobileContext'\n\nconst CELLSIZE = 20\n\nclass App extends React.Component {\n\n    constructor() {\n        super()\n\n        this.grid = []\n        this.start = null\n        this.end = null\n        this.route = []\n\n        this.state = {\n            algorithm: Alg.ASTAR,\n            item: CellType.START,\n            activeAlert: null,\n            visualizationState: VizState.INACTIVE,\n            visualizationSpeed: 90\n        }\n\n        this.drawOnGrid = this.drawOnGrid.bind(this)\n        this.changeAlgorithm = this.changeAlgorithm.bind(this)\n        this.changeItem = this.changeItem.bind(this)\n        this.onRunButtonClick = this.onRunButtonClick.bind(this)\n        this.updateRoute = this.updateRoute.bind(this)\n        this.clearVisualization = this.clearVisualization.bind(this)\n        this.removeAlert = this.removeAlert.bind(this)\n        this.changeVisSpeed = this.changeVisSpeed.bind(this)\n        this.createGrid = this.createGrid.bind(this)\n        this.generateMazeSimple = this.generateMazeSimple.bind(this)\n\n        this.algFunctions = {\n            1: this.aStarPlus.bind(this),\n            2: this.BFS.bind(this),\n            3: this.DFS.bind(this)\n        }\n    }\n\n    componentDidMount() {\n        this.createGrid()\n    }\n\n    createGrid() {\n        let rows = Math.floor((window.innerHeight*0.7) / CELLSIZE)\n        let cols = Math.floor((window.innerWidth*0.65) / CELLSIZE)\n        let newGrid = []\n        for (let y=0;y<rows;y++) {\n            newGrid.push([])\n            for (let x=0;x<cols;x++) {\n                newGrid[y].push({\n                    type: CellType.NONE,\n                    x: x,\n                    y: y,\n                    ref: null\n                })\n            }\n        }\n        this.grid = newGrid\n        this.setState({})\n    }\n\n    changeItem(selectedItem) {\n        this.setState({item: selectedItem})\n    }\n\n    changeAlgorithm(event) {\n        this.setState({algorithm: parseInt(event.target.value)})\n    }\n\n    removeAlert() {\n        this.setState({activeAlert: null})\n    }\n\n    changeVisSpeed(value) {\n        this.setState({ visualizationSpeed: value })\n    }\n\n    onRunButtonClick() { \n        let start = this.start\n        let end = this.end\n        if (start === null) {\n            this.setState({activeAlert: AlertTypes.NOSTART})\n            return\n        } else if (end === null) {\n            this.setState({activeAlert: AlertTypes.NOEND})\n            return\n        }\n\n        if (this.state.visualizationState === VizState.RUNNING) {\n            this.setState({\n                visualizationState: VizState.FINISHED\n            })\n        } else if (this.state.visualizationState === VizState.FINISHED) {\n            this.clearVisualization()\n        } else {\n            this.setState({\n                start: start,\n                end: end,\n                visualizationState: VizState.RUNNING},\n                () => this.algFunctions[this.state.algorithm](this.grid[start.y][start.x],\n                    this.grid[end.y][end.x])\n            )\n        }\n    }\n\n    async updateRoute() { \n        this.route.reverse()\n        asyncForEach(this.route, async (coord) => {\n            if (this.state.visualizationState === VizState.RUNNING)\n                await sleep(Math.abs(this.state.visualizationSpeed-110)) \n            this.grid[coord.y][coord.x].type = CellType.ROUTE\n            applyStyle(CellStyles[CellType.ROUTE], this.grid[coord.y][coord.x].ref)\n\n        }).then(() => {\n\n            this.setState({visualizationState: VizState.FINISHED})\n        })\n    }\n\n    drawOnGrid(x, y, itemType = this.state.item) { \n\n        const replaceCell = (startOrEnd) => {\n                let prevX = startOrEnd.x\n                let prevY = startOrEnd.y\n                this.grid[prevY][prevX].type = CellType.NONE\n                applyStyle(CellStyles[CellType.NONE], this.grid[prevY][prevX].ref)\n        }\n\n        // Delete end- / start-nodes if they were drawn on\n        if (this.end && this.end.x === x && this.end.y === y ) {\n            replaceCell(this.end)\n            this.end = null \n        } else if (this.start && this.start.x === x && this.start.y === y ) {\n            replaceCell(this.start)\n            this.start = null\n        }\n        \n        // Special case: drawing end- or start-nodes\n        if (itemType ===  CellType.START) { \n            if (this.start) {\n                replaceCell(this.start)\n            }\n            this.start = {x: x, y: y}\n        } else if (itemType ===  CellType.END) { \n            if (this.end) {\n                replaceCell(this.end)\n            }\n            this.end = {x: x, y: y}\n        } \n\n        this.grid[y][x].type = itemType\n        applyStyle(CellStyles[itemType], this.grid[y][x].ref)\n    }\n\n    generateMazeSimple() { // Prim's Algorithm\n        this.clearVisualization()\n        this.grid.forEach(row => {\n            row.forEach(cell => {\n                cell.type = CellType.WALL\n            })\n        })\n\n        let wallList = [this.grid[1][1]]\n\n        const canBeOpened = (cell) => {\n            let psgCount = 0\n            if (!cell) return false\n            Adjacent.forEach(direction => {\n                let x = cell.x+direction[0]\n                let y = cell.y+direction[1]\n                if (!this.grid[y] || !this.grid[y][x]) return\n                if (this.grid[y][x].type === CellType.NONE) psgCount += 1\n            })\n            return ( psgCount <= 1 )\n        }\n\n        while (wallList.length) {\n            let index = Math.floor(Math.random() * wallList.length)\n            let wall =  wallList[index]\n            if (canBeOpened(wall)) {\n                wall.type = CellType.NONE\n                Adjacent.forEach((direction) => {\n                    let x = wall.x+direction[0]\n                    let y = wall.y+direction[1]\n                    if (!this.grid[y] || !this.grid[y][x]) return\n                    wallList.push(this.grid[y][x])\n                })\n            }\n            wallList.splice(index,1)\n        }\n        \n        // draw results\n        this.grid.forEach(row => {\n            row.forEach(cell => {\n                this.drawOnGrid(cell.x, cell.y, cell.type)\n            })\n        })\n\n    }\n\n    async aStarPlus(start, end, alg = Alg.ASTAR) { \n\n        // initialize\n        let foundRoute = false\n        class Node {\n          constructor(x, y, dist, gScore) {\n            this.x = x\n            this.y = y\n            this.distance = dist\n            this.gScore = gScore\n          }\n        }\n        const comparator = (a,b) => { \n            return a.gScore > b.gScore ? 1 : -1\n        }\n\n        let queue = [] \n        queue.push(new Node(start.x,start.y,0,0))\n        let adjacencyListD = { \n            [start.x+':'+start.y]: null\n        }\n        let algGrid = this.grid\n\n        // perform search\n        while (queue.length) {\n            let current = queue.shift()\n\n            if (current.x === end.x && current.y === end.y) { // found\n                foundRoute = true\n                break\n            }\n\n            Adjacent.forEach((direction) => {\n                let x = current.x+direction[0]\n                let y = current.y+direction[1]\n                if (!algGrid[y]) return\n                if (!algGrid[y][x]) return\n                let next = algGrid[y][x]\n                if (next.type === CellType.WALL ||\n                   (next.x === start.x && next.y === start.y)) return\n\n                if (!adjacencyListD[x+':'+y]) { // Not yet discovered\n                    adjacencyListD[x+':'+y] = {\n                        x: current.x, \n                        y: current.y,\n                        d: 9999\n                    }\n                }\n\n                let distance = current.distance+1  \n                const multiplier = 1.0\n                let gScore = distance + multiplier*(Math.abs(end.x - x) + Math.abs(end.y - y))\n\n                if (distance < adjacencyListD[x+':'+y].d) { // Found a shorter path\n                    adjacencyListD[x+':'+y] = {\n                        x: current.x, \n                        y: current.y,\n                        d: distance\n                    }\n                    if (alg !== Alg.DFS) {\n                        queue.push(new Node(x, y, distance,gScore))\n                    }\n                    else {\n                        queue.unshift(new Node(x, y, distance,gScore))\n                    }\n                }\n            })\n            let currentCell = algGrid[current.y][current.x]\n\n            if (currentCell.type !== CellType.START && currentCell.type !== CellType.VISITED) { // Mark current as visited\n                currentCell.type = CellType.VISITED \n                if ( this.state.visualizationState === VizState.RUNNING ) { // Running -> run animation\n                    await sleep(Math.abs(this.state.visualizationSpeed-110)) \n                    applyStyle(CellStyles[CellType.VISITED], currentCell.ref, (ref) => {\n                        sleep(400).then(() => {\n                            ref.current.style.transform = 'scale(1.0)'\n                        })\n                    })\n                } else {\n                    applyStyle(CellStyles[6], currentCell.ref) \n                }\n            }\n\n            if (alg === Alg.ASTAR ) {\n                queue.sort(comparator)\n            }\n        }\n\n        // draw results\n        if (foundRoute) {\n            this.setRoute(adjacencyListD,end) \n        }\n        if (this.state.visualizationState === VizState.RUNNING) {\n            await sleep(100)\n        }\n        this.updateRoute()\n    }\n\n    async DFS(start, end) {\n        this.aStarPlus(start, end, Alg.DFS)\n    }\n        \n    async BFS(start, end) {\n        this.aStarPlus(start, end, Alg.BFS)\n    }\n\n    clearVisualization(resetAll = false) {\n        this.route = []\n\n        this.setState(() => {\n            this.grid.map((row) => {\n                row = row.map((c) => {\n                    if (this.start && c.x === this.start.x && c.y === this.start.y) \n                        c.type = CellType.START\n                    else if (this.end && c.x === this.end.x && c.y === this.end.y) \n                        c.type = CellType.END\n                    else if (resetAll ||\n                    c.type === CellType.VISITED ||\n                    c.type === CellType.ROUTE) {\n                        applyStyle(CellStyles[CellType.NONE], c.ref)\n                        c.type = CellType.NONE\n                    }\n                    return c\n                })\n                return row\n            })\n            return { visualizationState: VizState.INACTIVE }\n        })\n        if (resetAll) {\n            this.start = null\n            this.end = null\n        }\n            \n    }\n\n    setRoute(adjacencyList, end) {\n        this.route.push({\n            x: end.x, \n            y: end.y\n        })\n        \n        let index = end.x+':'+end.y\n        while (adjacencyList[index] !== null) {\n            this.route.push(adjacencyList[index])\n            index = adjacencyList[index].x+':'+adjacencyList[index].y\n        }\n        console.log('Route length: '+this.route.length)\n        this.route.shift() // remove start\n        this.route.pop() // and end\n    }\n\n    render() {\n        return (\n            <div>\n                <MobileStateProvider>\n                    <Notification\n                        active={this.state.visualizationState === VizState.FINISHED}\n                        isAlert={!this.route.length}\n                        text={ \n                            this.route.length ? \n                            `Found path of length ${this.route.length}.`\n                            : 'Path not found!'\n                        }\n                    />\n                    <Settings\n                        changeSelectedAlgorithm={this.changeAlgorithm}\n                        onClick={this.onRunButtonClick}\n                        onMazeClick={this.generateMazeSimple}\n                        onResetClick={this.clearVisualization}\n                        visualizationState={this.state.visualizationState}\n                        changeVisSpeed={this.changeVisSpeed}\n                        visualizationSpeed={this.state.visualizationSpeed}\n                        activeAlert={this.state.activeAlert}\n                    />\n                </MobileStateProvider>\n                <span \n                    style = {{ \n                        width: '100%', \n                        height: '100%', \n                        display: 'flex' , \n                        flexDirection: 'row' , \n                        topMargin: '100', \n                        position: 'fixed',\n                        padding: '0px 0px'\n                    }}>\n                    <ItemBar\n                        changeSelectedItem={this.changeItem}\n                        selectedItem={this.state.item}\n                        hidden={this.state.visualizationState !== VizState.INACTIVE}\n                        activeAlert={this.state.activeAlert}\n                        removeAlert={this.removeAlert}\n                    />\n                    <Grid\n                        updateCell={this.drawOnGrid}\n                        selectedItem={this.state.item}\n                        grid={this.grid}\n                        disableDrawing={this.state.visualizationState !== VizState.INACTIVE}\n                    />\n                </span>\n            </div>\n        )\n    }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/style.css'\n\nimport App from './components/App'\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n"],"sourceRoot":""}