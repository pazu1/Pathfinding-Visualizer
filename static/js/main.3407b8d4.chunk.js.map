{"version":3,"sources":["extfunctions.js","components/Pages.js","components/Modal.js","components/TabbedMenu.js","components/MobileContext.js","constvar.js","components/TopBar.js","components/Controls.js","components/GridButton.js","components/Grid.js","components/ItemBarBtn.js","components/ItemBar.js","components/Notification.js","components/App.js","index.js"],"names":["sleep","ms","Promise","resolve","setTimeout","applyStyle","style","reference","effect","current","background","transform","asyncForEach","array","callback","a","index","length","GITHUBURL","Pages","color","textAlign","href","onClick","url","window","open","textDecoration","fontSize","Modal","props","handleModalClick","event","preventDefault","target","currentTarget","onClickOutside","children","useTransition","display","from","opacity","enter","leave","map","item","key","div","className","TabbedMenu","normalStyle","flexGrow","selectedStyle","useState","currentIndex","setCurrentIndex","tabs","titles","title","pages","MobileContext","React","createContext","MobileStateProvider","setMobile","newMobile","setState","mobile","state","onResize","bind","requestAnimationFrame","width","innerWidth","this","addEventListener","removeEventListener","Provider","value","Component","CellStyles","Alg","CellType","VizState","AlertTypes","Adjacent","TopBar","hide","sProps","useSpring","height","config","wobbly","stiff","aStyle","name","id","onChange","changeSelectedAlgorithm","disabled","visualizationState","min","max","visualizationSpeed","e","changeVisSpeed","type","onMazeClick","onResetClick","runButtonIcon","runButtonText","Controls","expanded","showHelp","context","dropDownIcon","position","left","bottom","zIndex","prevState","textShadow","contextType","GridButton","updateAnyway","compRef","useRef","cell","ref","onMouseDown","disableDrawing","clickFunction","x","y","onMouseOver","drawing","Grid","runningAlgorithm","pressed","tableContent","grid","row","rowContent","updateCell","handleMouse","onMouseLeave","onMouseUp","ItemBarBtn","boxShadow","border","trigger","text","closeOnDocumentClick","showTip","on","onClose","onTipClosed","tipText","ItemBar","setExpanded","hidden","selectedItem","changeSelectedItem","activeAlert","removeAlert","Notification","margin","useContext","active","prevWasAlert","useEffect","usePrevious","isAlert","App","start","end","route","algorithm","drawOnGrid","changeAlgorithm","changeItem","onRunButtonClick","updateRoute","clearVisualization","createGrid","generateMazeSimple","algFunctions","1","findPath","2","3","4","rows","Math","floor","innerHeight","cols","newGrid","push","parseInt","reverse","coord","abs","then","itemType","replaceCell","startOrEnd","prevX","prevY","forEach","wallList","random","wall","psgCount","direction","canBeOpened","splice","alg","foundRoute","comparator","b","gScore","queue","Node","dist","distance","adjacencyListD","algGrid","shift","next","d","unshift","currentCell","sort","setRoute","resetAll","c","adjacencyList","pop","flexDirection","topMargin","padding","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3407b8d4.chunk.js","sourcesContent":["export function sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nexport function applyStyle(style, reference, effect = null) {\n    reference.current.style.background = style.background;\n    reference.current.style.transform = style.transform;\n    if (effect) {\n        effect(reference);\n    }\n}\n\nexport async function asyncForEach(array, callback) {\n    for (let index = 0; index < array.length; index++) {\n        await callback(array[index], index, array);\n    }\n}\n\nexport function openWebpage(url) {\n    const win = window.open(url, \"_blank\");\n    if (win != null) {\n        win.focus();\n    }\n}\n","import React, { useState } from \"react\";\nimport LogoGithub from \"react-ionicons/lib/LogoGithub\";\n\nimport { openWebpage } from \"../extfunctions\";\n\nfunction openTab(url) {\n    window.open(url);\n}\n\nconst GITHUBURL = \"https://github.com/pazu1/Pathfinding-Visualizer\";\n\nexport const Pages = [\n    <div>\n        <h2>How to use</h2>\n        <p>\n            Select an algorithm from the button on the top left of the page.\n            <br />\n            From the Items-menu select a{\" \"}\n            <span style={{ color: \"#36bf00\" }}>start</span> and an{\" \"}\n            <span style={{ color: \"#a200ff\" }}>end</span> node and place them in\n            the grid.\n            <br /> Draw walls from the same menu or click the 'Generate\n            maze'-button to create a maze.\n            <br />\n            Click 'Run!' to run the visualization. The selected algorithm will\n            then try to find a path between{\" \"}\n            <span style={{ color: \"#36bf00\" }}>start</span> and{\" \"}\n            <span style={{ color: \"#a200ff\" }}>end</span>. <br />\n            <br />\n            <span style={{ color: \"#38ffc7\" }}>Visited</span> nodes nodes are\n            marked in cyan. They are parts of the grid that the algorithm had to\n            take into account in order to find the final path.\n            <br />\n            When an algorithm performs efficiently there usually aren't too many\n            of these and the path is found quickly.\n            <br />\n            For more information about the algorithms used see the\n            'Algorithms'-tab.\n            <br />\n            <br />\n            If a <span style={{ color: \"#f05e54\" }}>path</span> is found it will\n            be marked on the grid with red.\n            <br />\n            <br />\n        </p>\n    </div>,\n\n    <div>\n        <h2>Algorithms</h2>\n        <p>\n            There are four pathfinding algorithms to choose from\n            <ul>\n                <li>Breadth First Search</li>\n                <li>Depth First Search</li>\n                <li>A*</li>\n                <li>Greedy Best First Search</li>\n            </ul>\n        </p>\n\n        <h2>Breadth First Search</h2>\n        <p>\n            Breadth First Search (BFS) is a simple pathfinding algorithm. It is\n            always guaranteed to find the shortest path. Because there are no\n            weights in the grid in this application this algorithm behaves the\n            exact same as Dijkstra's algorithm would.\n        </p>\n\n        <h2>Depth First Search</h2>\n        <p>\n            Depth First Search (DFS) is an equally simple algorithm. The\n            algorithm travels as far (deep) as possible in the graph before\n            returning to unvisited nodes. For this reason it is in most cases\n            not very efficient in finding a path. Depth First Search has many\n            applications in solving other pathfinding related problems, such as\n            finding paths with cycles.\n            <br />\n            Depth First Search is not guaranteed to find the shortest path.\n        </p>\n\n        <h2>A*</h2>\n        <p>\n            A* is a more complex pathfinding algorithm and considered to be one\n            of the most efficient. It uses a heuristic guess to reduce the\n            amount of time having to explore parts of the graph that are\n            unlikely to lead to a good path. In terms of time complexity it is\n            always at least as fast as Dijkstra's algorithm, usually much\n            faster.\n            <br />\n            A* is always guaranteed to find the shortest path.\n        </p>\n\n        <h2>Greedy Best First Search</h2>\n        <p>\n            This algorithm is almost the exact same as A*, but it uses a more\n            greedy/aggressive heuristic guess, often leading it too far down the\n            graph too fast but as a result sometimes finding a path more quickly\n            than A* would.\n            <br />\n            The tradeoff is that it is not guaranteed to find the shortest path.\n        </p>\n\n        <h2>About the implementation</h2>\n        <p>\n            This application uses a Manhattan distance heuristic, because it\n            makes more sense for grid-based pathfinding in my opinion, as\n            opposed to Pythagorean.\n            <br />\n            <br />\n            The grid is basically an unweighted graph, meaning that the weight\n            (or distance) between two adjacent nodes is the same everywhere, for\n            which reason the algorithms are equivalent to their unweighted\n            versions. This is why there is no option for Dijkstra's algorithm,\n            as it would behave the exact same as Breadth First Search in this\n            instance.\n            <br />\n            <br />\n            Maze generation is done using a randomized version of Prim's\n            algorithm.\n        </p>\n    </div>,\n\n    <div style={{ textAlign: \"center\" }}>\n        <br />\n        <br />\n        <br />\n        <a\n            href={GITHUBURL}\n            onClick={() => openTab(GITHUBURL)}\n            style={{ color: \"#000\", textDecoration: \"none\" }}\n        >\n            <p>View project on GitHub:</p>\n            <LogoGithub fontSize=\"4rem\" />\n        </a>\n    </div>,\n];\n\nexport default Pages;\n","import React from \"react\";\n\nimport { useTransition, animated } from \"react-spring\";\n\nfunction Modal(props) {\n    function handleModalClick(event) {\n        event.preventDefault();\n        if (event.target === event.currentTarget) {\n            props.onClickOutside();\n        }\n    }\n\n    const { children } = props;\n    const transitions = useTransition(props.display, null, {\n        from: { opacity: 0 },\n        enter: { opacity: 1 },\n        leave: { opacity: 0 },\n    });\n\n    return transitions.map(\n        ({ item, key, props }) =>\n            item && (\n                <animated.div\n                    className=\"modalBg\"\n                    key={key}\n                    style={props}\n                    onClick={handleModalClick}\n                >\n                    {children}\n                </animated.div>\n            )\n    );\n}\n\nexport default Modal;\n","import React, { useState } from \"react\";\n\nfunction TabbedMenu(props) {\n    const normalStyle = {\n        flexGrow: 1,\n    };\n    const selectedStyle = {\n        flexGrow: 1.5,\n    };\n\n    const [currentIndex, setCurrentIndex] = useState(0);\n    const { titles } = props;\n    const tabs = titles.map((title, index) => {\n        return (\n            <button\n                className={\n                    index === currentIndex ? \"tabButton-selected\" : \"tabButton\"\n                }\n                style={index === currentIndex ? selectedStyle : normalStyle}\n                onClick={() => setCurrentIndex(index)}\n            >\n                {title}\n            </button>\n        );\n    });\n\n    return (\n        <div className=\"tabbedMenuContainer\">\n            <div className=\"tabbedTitleBar\">{tabs}</div>\n            <div className=\"tabbedMenuContent\">{props.pages[currentIndex]}</div>\n        </div>\n    );\n}\n\nexport default TabbedMenu;\n","import React from \"react\";\n\nconst MobileContext = React.createContext();\n\nconst MOBILE_WIDTH = 800;\n\nclass MobileStateProvider extends React.Component {\n    constructor(props) {\n        super();\n        this.state = {\n            mobile: false,\n        };\n        this.onResize = this.onResize.bind(this);\n    }\n\n    onResize() {\n        window.requestAnimationFrame(() => {\n            this.setState(() => {\n                let width = window.innerWidth;\n                let mobile = width < MOBILE_WIDTH;\n\n                return {\n                    width: width,\n                    mobile: mobile,\n                };\n            });\n        });\n    }\n\n    componentWillMount() {\n        this.setState({\n            width: window.innerWidth,\n            mobile: window.innerWidth < MOBILE_WIDTH,\n        });\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.onResize);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.onResize);\n    }\n\n    setMobile = (newMobile) => {\n        this.setState({ mobile: newMobile });\n    };\n\n    render() {\n        const { mobile } = this.state;\n        const { setMobile } = this;\n\n        return (\n            <MobileContext.Provider\n                value={{\n                    mobile,\n                    setMobile,\n                }}\n            >\n                {this.props.children}\n            </MobileContext.Provider>\n        );\n    }\n}\n\nexport default MobileContext;\n\nexport { MobileStateProvider };\n","export const CellStyles = [\n    {\n        background: \"#eee\",\n        color: \"#000\",\n        transform: \"scale(1.0)\",\n    },\n    {\n        background: \"#000\",\n        color: \"#000\",\n        transform: \"scale(1.0)\",\n    },\n    {\n        background: \"#36bf00\",\n        transform: \"scale(0.7)\",\n    },\n    {\n        background: \"#a200ff\",\n        transform: \"scale(0.7)\",\n    },\n    {\n        background: \"#38ffc7\",\n        transform: \"scale(0.2)\",\n    },\n    {\n        background: \"#f05e54\",\n        transform: \"scale(1.0)\",\n    },\n    {\n        background: \"#38ffc7\",\n        transform: \"scale(1.0)\",\n    },\n];\n\nexport const Alg = {\n    ASTAR: 1,\n    BFS: 2,\n    DFS: 3,\n    GBFS: 4,\n};\n\nexport const CellType = {\n    NONE: 0,\n    WALL: 1,\n    START: 2,\n    END: 3,\n    VISITED: 4,\n    ROUTE: 5,\n};\n\nexport const VizState = {\n    INACTIVE: 0,\n    RUNNING: 1,\n    FINISHED: 2,\n};\n\nexport const AlertTypes = {\n    NOSTART: \"Please add a start node.\",\n    NOEND: \"Please add an end node.\",\n};\n\nexport const Adjacent = [\n    [-1, 0],\n    [0, 1],\n    [1, 0],\n    [0, -1],\n];\n","import React from \"react\";\nimport RangeSlider from \"react-bootstrap-range-slider\";\nimport MdTrash from \"react-ionicons/lib/MdTrash\";\nimport { useSpring, animated, config } from \"react-spring\";\n\nimport { VizState, Alg } from \"../constvar\";\n\nfunction TopBar(props) {\n    const { mobile, hide, children } = props;\n\n    const sProps = useSpring({\n        height: !hide ? 280 : 0,\n        opacity: !hide ? 1 : 0,\n        config: (key) => (key === \"height\" ? config.wobbly : config.stiff),\n    });\n\n    const aStyle = {\n        height: sProps.height,\n        opacity: sProps.opacity,\n    };\n\n    return (\n        <animated.div\n            className={mobile ? \"topBarMobile\" : \"topBar\"}\n            style={mobile ? aStyle : null}\n        >\n            <div style={mobile ? { display: \"none\" } : null}>\n                <label>Algorithm: </label>\n                <select\n                    name=\"algorithms\"\n                    id=\"algorithms\"\n                    onChange={props.changeSelectedAlgorithm}\n                    disabled={props.visualizationState !== VizState.INACTIVE}\n                >\n                    <option value={Alg.ASTAR}>A*</option>\n                    <option value={Alg.BFS}>BFS</option>\n                    <option value={Alg.DFS}>DFS</option>\n                    <option value={Alg.GBFS}>Greedy BFS</option>\n                </select>\n            </div>\n            <br />\n\n            <div className=\"sliderContainer\">\n                <label>Visualization speed:</label>\n                <RangeSlider\n                    min={10}\n                    max={100}\n                    value={props.visualizationSpeed}\n                    onChange={(e) => props.changeVisSpeed(e.target.value)}\n                />\n            </div>\n            <br />\n\n            <button\n                type=\"button\"\n                className=\"settingsButton\"\n                disabled={props.visualizationState === VizState.RUNNING}\n                onClick={() => props.onMazeClick()}\n            >\n                Generate maze\n            </button>\n            <br />\n\n            <button\n                type=\"button\"\n                className=\"resetButton\"\n                disabled={props.visualizationState === VizState.RUNNING}\n                onClick={() => props.onResetClick(true)}\n            >\n                <MdTrash\n                    fontSize=\"17px\"\n                    className=\"ionIcon\"\n                    color={\n                        props.visualizationState === VizState.RUNNING\n                            ? \"#666\"\n                            : null\n                    }\n                />\n                Reset grid\n            </button>\n            <br />\n\n            <button\n                style={mobile ? { display: \"none\" } : null}\n                type=\"button\"\n                className=\"settingsButton\"\n                onClick={props.onClick}\n            >\n                {props.runButtonIcon}\n                {props.runButtonText}\n            </button>\n            {children}\n        </animated.div>\n    );\n}\n\nexport default TopBar;\n","import React from \"react\";\nimport \"react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css\";\nimport MdArrowDropdown from \"react-ionicons/lib/MdArrowDropdown\";\nimport MdArrowDropup from \"react-ionicons/lib/MdArrowDropup\";\nimport MdFastForward from \"react-ionicons/lib/MdFastforward\";\nimport MdRefresh from \"react-ionicons/lib/MdRefresh\";\nimport MdPlay from \"react-ionicons/lib/MdPlay\";\nimport MdHelp from \"react-ionicons/lib/MdHelpCircle\";\nimport MdCode from \"react-ionicons/lib/MdCode\";\nimport MdInfo from \"react-ionicons/lib/MdInformationCircle\";\n\nimport Pages from \"./Pages\";\nimport Modal from \"./Modal\";\nimport TabbedMenu from \"./TabbedMenu\";\nimport MobileContext from \"./MobileContext\";\nimport TopBar from \"./TopBar\";\nimport { Alg, VizState } from \"../constvar\";\n\nclass Controls extends React.Component {\n    static contextType = MobileContext;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: true,\n            showHelp: false,\n        };\n    }\n\n    render() {\n        const { mobile } = this.context;\n\n        let runButtonText = \"Run! \";\n        let runButtonIcon = <MdPlay fontSize=\"17px\" className=\"ionIcon\" />;\n\n        if (this.props.visualizationState === VizState.RUNNING) {\n            runButtonText = \"Skip visualization\";\n            runButtonIcon = (\n                <MdFastForward fontSize=\"17px\" className=\"ionIcon\" />\n            );\n        } else if (this.props.visualizationState === VizState.FINISHED) {\n            runButtonText = \"Clear path\";\n            runButtonIcon = <MdRefresh fontSize=\"17px\" className=\"ionIcon\" />;\n        }\n\n        let dropDownIcon = (\n            <MdArrowDropup fontSize=\"25px\" className=\"ionDropdown\" />\n        );\n        if (!this.state.expanded) {\n            dropDownIcon = (\n                <MdArrowDropdown fontSize=\"25px\" className=\"ionDropdown\" />\n            );\n        }\n\n        return (\n            <>\n                <Modal\n                    display={this.state.showHelp}\n                    onClickOutside={() => this.setState({ showHelp: false })}\n                >\n                    <TabbedMenu\n                        titles={[\n                            <span className=\"centeredSpan\">\n                                <MdHelp fontSize=\"17px\" className=\"ionIcon\" />\n                                {\"Help\"}\n                            </span>,\n                            <span className=\"centeredSpan\">\n                                <MdCode fontSize=\"17px\" className=\"ionIcon\" />\n                                {\"Algorithms\"}\n                            </span>,\n                            <span className=\"centeredSpan\">\n                                <MdInfo fontSize=\"17px\" className=\"ionIcon\" />\n                                {\"About\"}\n                            </span>,\n                        ]}\n                        pages={Pages}\n                    />\n                </Modal>\n                <button\n                    style={{\n                        position: \"fixed\",\n                        left: 0,\n                        bottom: 0,\n                        zIndex: 12,\n                        display: mobile ? \"none\" : null,\n                    }}\n                    onClick={() => this.setState({ showHelp: true })}\n                    className=\"settingsButton\"\n                    type=\"button\"\n                >\n                    <MdHelp fontSize=\"17px\" className=\"ionIcon\" />\n                    Help\n                </button>\n\n                <div className={mobile ? \"topBarContainer\" : null}>\n                    <button\n                        className=\"topBarToggle\"\n                        style={!mobile ? { display: \"none\" } : null}\n                        onClick={() =>\n                            this.setState((prevState) => {\n                                return { expanded: !prevState.expanded };\n                            })\n                        }\n                    >\n                        Options\n                        {dropDownIcon}\n                    </button>\n\n                    <TopBar\n                        hide={!this.state.expanded}\n                        mobile={mobile}\n                        changeSelectedAlgorithm={\n                            this.props.changeSelectedAlgorithm\n                        }\n                        visualizationState={this.props.visualizationState}\n                        onClick={this.props.onClick}\n                        changeVisSpeed={this.props.changeVisSpeed}\n                        visualizationSpeed={this.props.visualizationSpeed}\n                        runButtonText={runButtonText}\n                        runButtonIcon={runButtonIcon}\n                        onMazeClick={this.props.onMazeClick}\n                        onResetClick={this.props.onResetClick}\n                    >\n                        <button\n                            style={mobile ? null : { display: \"none\" }}\n                            onClick={() => this.setState({ showHelp: true })}\n                            className=\"settingsButton\"\n                            type=\"button\"\n                        >\n                            <MdHelp fontSize=\"17px\" className=\"ionIcon\" />\n                            Help\n                        </button>\n                    </TopBar>\n                    <div\n                        className=\"mobileActionBar\"\n                        style={!mobile ? { display: \"none\" } : null}\n                    >\n                        <div>\n                            <label\n                                style={{ textShadow: \"2px 2px 8px #000000\" }}\n                            >\n                                Algorithm:\n                            </label>\n                            <select\n                                name=\"algorithms\"\n                                id=\"algorithms\"\n                                onChange={this.props.changeSelectedAlgorithm}\n                                disabled={\n                                    this.props.visualizationState !==\n                                    VizState.INACTIVE\n                                }\n                            >\n                                <option value={Alg.ASTAR}>A*</option>\n                                <option value={Alg.BFS}>BFS</option>\n                                <option value={Alg.DFS}>DFS</option>\n                                <option value={Alg.GBFS}>Greedy BFS</option>\n                            </select>\n                        </div>\n                        <button\n                            className=\"settingsButton\"\n                            style={!mobile ? { display: \"none\" } : null}\n                            type=\"button\"\n                            onClick={this.props.onClick}\n                        >\n                            {runButtonIcon}\n                            {runButtonText}\n                        </button>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Controls;\n","import React, { useState, useRef } from \"react\";\n\nfunction GridButton(props) {\n    const [, setState] = useState();\n\n    const updateAnyway = () => {\n        setState({});\n    };\n\n    const compRef = useRef();\n    props.cell.ref = compRef;\n\n    return (\n        <button\n            ref={compRef}\n            type=\"button\"\n            className=\"gridButton\"\n            onMouseDown={() => {\n                if (!props.disableDrawing) {\n                    props.clickFunction(props.x, props.y);\n                    updateAnyway();\n                }\n            }}\n            onMouseOver={() => {\n                if (props.drawing && !props.disableDrawing) {\n                    props.clickFunction(props.x, props.y);\n                    updateAnyway();\n                }\n            }}\n        >\n            ‎\n        </button>\n    );\n}\n\nexport default GridButton;\n","import React from \"react\";\n\nimport GridButton from \"./GridButton\";\n\nclass Grid extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            drawing: false,\n            runningAlgorithm: false,\n        };\n    }\n\n    handleMouse(event, pressed) {\n        this.setState({ drawing: pressed });\n    }\n\n    render() {\n        let y = -1;\n        let tableContent = this.props.grid.map((row) => {\n            let x = -1;\n            y++;\n            let rowContent = row.map((cell) => {\n                x++;\n                return (\n                    <td key={x}>\n                        <GridButton\n                            cell={this.props.grid[y][x]}\n                            x={x}\n                            y={y}\n                            clickFunction={this.props.updateCell}\n                            drawing={this.state.drawing}\n                            disableDrawing={this.props.disableDrawing}\n                        />\n                    </td>\n                );\n            });\n            return <tr key={y}>{rowContent}</tr>;\n        });\n\n        return (\n            <table\n                className=\"gridBase\"\n                onMouseDown={(e) => {\n                    this.handleMouse(e, true);\n                }}\n                onMouseLeave={(e) => this.handleMouse(e, false)}\n                onMouseUp={(e) => this.handleMouse(e, false)}\n            >\n                <tbody>{tableContent}</tbody>\n            </table>\n        );\n    }\n}\n\nexport default Grid;\n","import React from \"react\";\nimport Popup from \"reactjs-popup\";\n\nfunction ItemBarBtn(props) {\n    let style = { display: \"table-row\" };\n    if (props.disabled) {\n        style.boxShadow = \"none\";\n        style.border = \"2px solid transparent\";\n    }\n\n    return (\n        <Popup\n            className=\"tooltip\"\n            trigger={\n                <button\n                    className=\"itemBarBtn\"\n                    style={style}\n                    onClick={props.onClick}\n                >\n                    <span style={{ color: props.color }}>{\"■ \"}</span>\n                    {props.text ? <p id=\"itemBarText\">{props.text}</p> : \"item\"}\n                </button>\n            }\n            position=\"right center\"\n            closeOnDocumentClick\n            open={props.showTip}\n            on=\"none\"\n            onClose={props.onTipClosed}\n        >\n            {props.tipText}\n        </Popup>\n    );\n}\n\nexport default ItemBarBtn;\n","import React, { useState } from \"react\";\n\nimport ItemBarBtn from \"./ItemBarBtn\";\nimport { CellType, AlertTypes } from \"../constvar\";\nimport MdArrowDropdown from \"react-ionicons/lib/MdArrowDropdown\";\nimport MdArrowDropup from \"react-ionicons/lib/MdArrowDropup\";\nimport { useSpring, animated, config } from \"react-spring\";\n\nfunction ItemBar(props) {\n    const [expanded, setExpanded] = useState(true);\n    let hide = !expanded || props.hidden;\n    let dropDownIcon = (\n        <MdArrowDropup fontSize=\"25px\" className=\"ionDropdown\" />\n    );\n    if (hide) {\n        dropDownIcon = (\n            <MdArrowDropdown fontSize=\"25px\" className=\"ionDropdown\" />\n        );\n    }\n\n    const sProps = useSpring({\n        height: !hide ? 330 : 0,\n        opacity: !hide ? 1 : 0,\n        config: (key) => (key === \"height\" ? config.wobbly : config.stiff),\n    });\n\n    const aStyle = {\n        height: sProps.height,\n        opacity: sProps.opacity,\n    };\n\n    return (\n        <div className=\"itemBarContainer\">\n            <button\n                className=\"itemBarToggle\"\n                onClick={() => {\n                    if (!props.hidden) setExpanded(!expanded);\n                }}\n            >\n                Items\n                {dropDownIcon}\n            </button>\n            <animated.div className=\"itemBar\" style={aStyle}>\n                <ItemBarBtn\n                    text={\"Start node\"}\n                    color={\"#36bf00\"}\n                    disabled={props.selectedItem !== CellType.START}\n                    onClick={() => {\n                        props.changeSelectedItem(CellType.START);\n                    }}\n                    showTip={props.activeAlert === AlertTypes.NOSTART}\n                    tipText={props.activeAlert}\n                    onTipClosed={props.removeAlert}\n                />\n                <ItemBarBtn\n                    text={\"End node\"}\n                    color={\"#a200ff\"}\n                    disabled={props.selectedItem !== CellType.END}\n                    onClick={() => {\n                        props.changeSelectedItem(CellType.END);\n                    }}\n                    showTip={props.activeAlert === AlertTypes.NOEND}\n                    tipText={props.activeAlert}\n                    onTipClosed={props.removeAlert}\n                />\n                <ItemBarBtn\n                    text={\"Wall\"}\n                    color={\"#000\"}\n                    disabled={props.selectedItem !== CellType.WALL}\n                    onClick={() => props.changeSelectedItem(CellType.WALL)}\n                />\n                <ItemBarBtn\n                    text={\"Eraser\"}\n                    color={\"#fff\"}\n                    disabled={props.selectedItem !== CellType.NONE}\n                    onClick={() => props.changeSelectedItem(CellType.NONE)}\n                />\n            </animated.div>\n        </div>\n    );\n}\n\nexport default ItemBar;\n","import React, { useEffect, useRef, useContext } from \"react\";\nimport { useSpring, animated } from \"react-spring\";\nimport MobileContext from \"./MobileContext\";\n\nconst ALERTCOLOR = \"#f05e54\";\nconst DESKTOPMARGIN = 30;\nconst MOBILEMARGIN = 90;\n\nfunction usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}\n\nfunction Notification(props) {\n    const { mobile } = useContext(MobileContext);\n    let margin = DESKTOPMARGIN;\n    if (mobile) margin = MOBILEMARGIN;\n\n    const sProps = useSpring({\n        height: props.active ? 50 : 0,\n        opacity: props.active ? 1 : 0,\n        bottom: props.active ? margin : 0,\n    });\n\n    const prevWasAlert = usePrevious(props.isAlert);\n\n    const style = {\n        height: sProps.height,\n        opacity: sProps.opacity,\n        background: props.isAlert && prevWasAlert ? ALERTCOLOR : null,\n        bottom: sProps.bottom,\n    };\n\n    return (\n        <animated.div className=\"notification\" style={style}>\n            <p>{props.active ? props.text : null}</p>\n        </animated.div>\n    );\n}\n\nexport default Notification;\n","import React from \"react\";\n\nimport Controls from \"./Controls\";\nimport Grid from \"./Grid\";\nimport ItemBar from \"./ItemBar\";\nimport Notification from \"./Notification\";\nimport {\n    Alg,\n    CellType,\n    CellStyles,\n    VizState,\n    AlertTypes,\n    Adjacent,\n} from \"../constvar\";\nimport { sleep, asyncForEach, applyStyle } from \"../extfunctions\";\nimport { MobileStateProvider } from \"./MobileContext\";\n\nconst CELLSIZE = 20;\n\nclass App extends React.Component {\n    constructor() {\n        super();\n\n        this.grid = [];\n        this.start = null;\n        this.end = null;\n        this.route = [];\n\n        this.state = {\n            algorithm: Alg.ASTAR,\n            item: CellType.START,\n            activeAlert: null,\n            visualizationState: VizState.INACTIVE,\n            visualizationSpeed: 90,\n        };\n\n        this.drawOnGrid = this.drawOnGrid.bind(this);\n        this.changeAlgorithm = this.changeAlgorithm.bind(this);\n        this.changeItem = this.changeItem.bind(this);\n        this.onRunButtonClick = this.onRunButtonClick.bind(this);\n        this.updateRoute = this.updateRoute.bind(this);\n        this.clearVisualization = this.clearVisualization.bind(this);\n        this.removeAlert = this.removeAlert.bind(this);\n        this.changeVisSpeed = this.changeVisSpeed.bind(this);\n        this.createGrid = this.createGrid.bind(this);\n        this.generateMazeSimple = this.generateMazeSimple.bind(this);\n\n        this.algFunctions = {\n            1: (start, end) => this.findPath(start, end, Alg.ASTAR),\n            2: (start, end) => this.findPath(start, end, Alg.BFS),\n            3: (start, end) => this.findPath(start, end, Alg.DFS),\n            4: (start, end) => this.findPath(start, end, Alg.GBFS),\n        };\n    }\n\n    componentDidMount() {\n        this.createGrid();\n    }\n\n    createGrid() {\n        let rows = Math.floor((window.innerHeight * 0.7) / CELLSIZE);\n        let cols = Math.floor((window.innerWidth * 0.65) / CELLSIZE);\n        let newGrid = [];\n        for (let y = 0; y < rows; y++) {\n            newGrid.push([]);\n            for (let x = 0; x < cols; x++) {\n                newGrid[y].push({\n                    type: CellType.NONE,\n                    x: x,\n                    y: y,\n                    ref: null,\n                });\n            }\n        }\n        this.grid = newGrid;\n        this.setState({});\n    }\n\n    changeItem(selectedItem) {\n        this.setState({ item: selectedItem });\n    }\n\n    changeAlgorithm(event) {\n        this.setState({ algorithm: parseInt(event.target.value) });\n    }\n\n    removeAlert() {\n        this.setState({ activeAlert: null });\n    }\n\n    changeVisSpeed(value) {\n        this.setState({ visualizationSpeed: value });\n    }\n\n    onRunButtonClick() {\n        let start = this.start;\n        let end = this.end;\n        if (start === null) {\n            this.setState({ activeAlert: AlertTypes.NOSTART });\n            return;\n        } else if (end === null) {\n            this.setState({ activeAlert: AlertTypes.NOEND });\n            return;\n        }\n\n        if (this.state.visualizationState === VizState.RUNNING) {\n            this.setState({\n                visualizationState: VizState.FINISHED,\n            });\n        } else if (this.state.visualizationState === VizState.FINISHED) {\n            this.clearVisualization();\n        } else {\n            this.setState(\n                {\n                    start: start,\n                    end: end,\n                    visualizationState: VizState.RUNNING,\n                },\n                () =>\n                    this.algFunctions[this.state.algorithm](\n                        this.grid[start.y][start.x],\n                        this.grid[end.y][end.x]\n                    )\n            );\n        }\n    }\n\n    async updateRoute() {\n        this.route.reverse();\n        asyncForEach(this.route, async (coord) => {\n            if (this.state.visualizationState === VizState.RUNNING)\n                await sleep(Math.abs(this.state.visualizationSpeed - 110));\n            this.grid[coord.y][coord.x].type = CellType.ROUTE;\n            applyStyle(\n                CellStyles[CellType.ROUTE],\n                this.grid[coord.y][coord.x].ref\n            );\n        }).then(() => {\n            this.setState({ visualizationState: VizState.FINISHED });\n        });\n    }\n\n    drawOnGrid(x, y, itemType = this.state.item) {\n        const replaceCell = (startOrEnd) => {\n            let prevX = startOrEnd.x;\n            let prevY = startOrEnd.y;\n            this.grid[prevY][prevX].type = CellType.NONE;\n            applyStyle(CellStyles[CellType.NONE], this.grid[prevY][prevX].ref);\n        };\n\n        // Delete end- / start-nodes if they were drawn on\n        if (this.end && this.end.x === x && this.end.y === y) {\n            replaceCell(this.end);\n            this.end = null;\n        } else if (this.start && this.start.x === x && this.start.y === y) {\n            replaceCell(this.start);\n            this.start = null;\n        }\n\n        // Special case: drawing end- or start-nodes\n        if (itemType === CellType.START) {\n            if (this.start) {\n                replaceCell(this.start);\n            }\n            this.start = { x: x, y: y };\n        } else if (itemType === CellType.END) {\n            if (this.end) {\n                replaceCell(this.end);\n            }\n            this.end = { x: x, y: y };\n        }\n\n        this.grid[y][x].type = itemType;\n        applyStyle(CellStyles[itemType], this.grid[y][x].ref);\n    }\n\n    generateMazeSimple() {\n        // Prim's Algorithm\n        this.clearVisualization();\n        this.grid.forEach((row) => {\n            row.forEach((cell) => {\n                cell.type = CellType.WALL;\n            });\n        });\n\n        let wallList = [this.grid[1][1]];\n\n        const canBeOpened = (cell) => {\n            let psgCount = 0;\n            if (!cell) return false;\n            Adjacent.forEach((direction) => {\n                let x = cell.x + direction[0];\n                let y = cell.y + direction[1];\n                if (!this.grid[y] || !this.grid[y][x]) return;\n                if (this.grid[y][x].type === CellType.NONE) psgCount += 1;\n            });\n            return psgCount <= 1;\n        };\n\n        while (wallList.length) {\n            let index = Math.floor(Math.random() * wallList.length);\n            let wall = wallList[index];\n            if (canBeOpened(wall)) {\n                wall.type = CellType.NONE;\n                Adjacent.forEach((direction) => {\n                    let x = wall.x + direction[0];\n                    let y = wall.y + direction[1];\n                    if (!this.grid[y] || !this.grid[y][x]) return;\n                    wallList.push(this.grid[y][x]);\n                });\n            }\n            wallList.splice(index, 1);\n        }\n\n        // draw results\n        this.grid.forEach((row) => {\n            row.forEach((cell) => {\n                this.drawOnGrid(cell.x, cell.y, cell.type);\n            });\n        });\n    }\n\n    // Includes A*, BFS, DFS and Greedy BFS\n    async findPath(start, end, alg) {\n        // initialize\n        let foundRoute = false;\n        class Node {\n            constructor(x, y, dist, gScore) {\n                this.x = x;\n                this.y = y;\n                this.distance = dist;\n                this.gScore = gScore;\n            }\n        }\n        const comparator = (a, b) => {\n            return a.gScore > b.gScore ? 1 : -1;\n        };\n\n        let queue = [];\n        queue.push(new Node(start.x, start.y, 0, 0));\n        let adjacencyListD = {\n            [start.x + \":\" + start.y]: null,\n        };\n        let algGrid = this.grid;\n\n        // perform search\n        while (queue.length) {\n            let current = queue.shift();\n\n            if (current.x === end.x && current.y === end.y) {\n                // found\n                foundRoute = true;\n                break;\n            }\n\n            Adjacent.forEach((direction) => {\n                let x = current.x + direction[0];\n                let y = current.y + direction[1];\n                if (!algGrid[y]) return;\n                if (!algGrid[y][x]) return;\n                let next = algGrid[y][x];\n                if (\n                    next.type === CellType.WALL ||\n                    (next.x === start.x && next.y === start.y)\n                )\n                    return;\n\n                if (!adjacencyListD[x + \":\" + y]) {\n                    // Not yet discovered\n                    adjacencyListD[x + \":\" + y] = {\n                        x: current.x,\n                        y: current.y,\n                        d: 9999,\n                    };\n                }\n\n                let distance = current.distance + 1;\n                if (alg === Alg.GBFS) {\n                    distance = 0;\n                }\n                const multiplier = 1.0;\n                let gScore =\n                    distance +\n                    multiplier * (Math.abs(end.x - x) + Math.abs(end.y - y));\n\n                if (distance < adjacencyListD[x + \":\" + y].d) {\n                    // Found a shorter path\n                    adjacencyListD[x + \":\" + y] = {\n                        x: current.x,\n                        y: current.y,\n                        d: distance,\n                    };\n                    if (alg !== Alg.DFS) {\n                        queue.push(new Node(x, y, distance, gScore));\n                    } else {\n                        queue.unshift(new Node(x, y, distance, gScore));\n                    }\n                }\n            });\n            let currentCell = algGrid[current.y][current.x];\n\n            if (\n                currentCell.type !== CellType.START &&\n                currentCell.type !== CellType.VISITED\n            ) {\n                // Mark current as visited\n                currentCell.type = CellType.VISITED;\n                if (this.state.visualizationState === VizState.RUNNING) {\n                    // Running -> run animation\n                    await sleep(Math.abs(this.state.visualizationSpeed - 110));\n                    applyStyle(\n                        CellStyles[CellType.VISITED],\n                        currentCell.ref,\n                        (ref) => {\n                            sleep(400).then(() => {\n                                ref.current.style.transform = \"scale(1.0)\";\n                            });\n                        }\n                    );\n                } else {\n                    applyStyle(CellStyles[6], currentCell.ref);\n                }\n            }\n\n            if (alg === Alg.ASTAR || alg === Alg.GBFS) {\n                queue.sort(comparator);\n            }\n        }\n\n        // draw results\n        if (foundRoute) {\n            this.setRoute(adjacencyListD, end);\n        }\n        if (this.state.visualizationState === VizState.RUNNING) {\n            await sleep(100);\n        }\n        this.updateRoute();\n    }\n\n    clearVisualization(resetAll = false) {\n        this.route = [];\n\n        this.setState(() => {\n            this.grid.map((row) => {\n                row = row.map((c) => {\n                    if (\n                        this.start &&\n                        c.x === this.start.x &&\n                        c.y === this.start.y\n                    )\n                        c.type = CellType.START;\n                    else if (\n                        this.end &&\n                        c.x === this.end.x &&\n                        c.y === this.end.y\n                    )\n                        c.type = CellType.END;\n                    else if (\n                        resetAll ||\n                        c.type === CellType.VISITED ||\n                        c.type === CellType.ROUTE\n                    ) {\n                        applyStyle(CellStyles[CellType.NONE], c.ref);\n                        c.type = CellType.NONE;\n                    }\n                    return c;\n                });\n                return row;\n            });\n            return { visualizationState: VizState.INACTIVE };\n        });\n        if (resetAll) {\n            this.start = null;\n            this.end = null;\n        }\n    }\n\n    setRoute(adjacencyList, end) {\n        this.route.push({\n            x: end.x,\n            y: end.y,\n        });\n\n        let index = end.x + \":\" + end.y;\n        while (adjacencyList[index] !== null) {\n            this.route.push(adjacencyList[index]);\n            index = adjacencyList[index].x + \":\" + adjacencyList[index].y;\n        }\n        this.route.shift(); // remove start\n        this.route.pop(); // and end\n    }\n\n    render() {\n        return (\n            <>\n                <MobileStateProvider>\n                    <Notification\n                        active={\n                            this.state.visualizationState === VizState.FINISHED\n                        }\n                        isAlert={!this.route.length}\n                        text={\n                            this.route.length\n                                ? `Found path of length ${this.route.length}.`\n                                : \"Path not found!\"\n                        }\n                    />\n                    <Controls\n                        changeSelectedAlgorithm={this.changeAlgorithm}\n                        onClick={this.onRunButtonClick}\n                        onMazeClick={this.generateMazeSimple}\n                        onResetClick={this.clearVisualization}\n                        visualizationState={this.state.visualizationState}\n                        changeVisSpeed={this.changeVisSpeed}\n                        visualizationSpeed={this.state.visualizationSpeed}\n                        activeAlert={this.state.activeAlert}\n                    />\n                </MobileStateProvider>\n                <span\n                    style={{\n                        width: \"100%\",\n                        height: \"100%\",\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        topMargin: \"100\",\n                        position: \"fixed\",\n                        padding: \"0px 0px\",\n                    }}\n                >\n                    <ItemBar\n                        changeSelectedItem={this.changeItem}\n                        selectedItem={this.state.item}\n                        hidden={\n                            this.state.visualizationState !== VizState.INACTIVE\n                        }\n                        activeAlert={this.state.activeAlert}\n                        removeAlert={this.removeAlert}\n                    />\n                    <Grid\n                        updateCell={this.drawOnGrid}\n                        selectedItem={this.state.item}\n                        grid={this.grid}\n                        disableDrawing={\n                            this.state.visualizationState !== VizState.INACTIVE\n                        }\n                    />\n                </span>\n            </>\n        );\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles/style.css\";\n\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}